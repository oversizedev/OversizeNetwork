// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Retrieve applications
    ///
    /// Get all app
    ///
    /// - Remark: HTTP `GET /v1/apps`.
    /// - Remark: Generated from `#/paths//v1/apps/get(getApps)`.
    func getApps(_ input: Operations.getApps.Input) async throws -> Operations.getApps.Output
    /// Retrieve application
    ///
    /// Get App Information
    ///
    /// - Remark: HTTP `GET /v1/apps/{id}`.
    /// - Remark: Generated from `#/paths//v1/apps/{id}/get(getApp)`.
    func getApp(_ input: Operations.getApp.Input) async throws -> Operations.getApp.Output
    /// Retrieve application features
    ///
    /// Get all features associated with a specific application
    ///
    /// - Remark: HTTP `GET /v1/apps/{id}/features`.
    /// - Remark: Generated from `#/paths//v1/apps/{id}/features/get(getAppFeatures)`.
    func getAppFeatures(_ input: Operations.getAppFeatures.Input) async throws -> Operations.getAppFeatures.Output
    /// Retrieve application ads
    ///
    /// Get all ads features associated with a specific application
    ///
    /// - Remark: HTTP `GET /v1/apps/{id}/ads`.
    /// - Remark: Generated from `#/paths//v1/apps/{id}/ads/get(getAppAds)`.
    func getAppAds(_ input: Operations.getAppAds.Input) async throws -> Operations.getAppAds.Output
    /// Retrieve application ad
    ///
    /// Get ad associated with a specific application
    ///
    /// - Remark: HTTP `GET /v1/apps/{id}/ad`.
    /// - Remark: Generated from `#/paths//v1/apps/{id}/ad/get(getAppAd)`.
    func getAppAd(_ input: Operations.getAppAd.Input) async throws -> Operations.getAppAd.Output
    /// Retrieve application App Store products ids
    ///
    /// Get all subscription ids associated with a specific application
    ///
    /// - Remark: HTTP `GET /v1/apps/{id}/app-store/productIds`.
    /// - Remark: Generated from `#/paths//v1/apps/{id}/app-store/productIds/get(GetAppStoreProductIds)`.
    func GetAppStoreProductIds(_ input: Operations.GetAppStoreProductIds.Input) async throws -> Operations.GetAppStoreProductIds.Output
    /// Retrieve application features
    ///
    /// Get all features associated with a specific application
    ///
    /// - Remark: HTTP `GET /v1/features/{id}`.
    /// - Remark: Generated from `#/paths//v1/features/{id}/get(getAppFeature)`.
    func getAppFeature(_ input: Operations.getAppFeature.Input) async throws -> Operations.getAppFeature.Output
    /// Retrieve StoreKit offers
    ///
    /// Get all sale offers
    ///
    /// - Remark: HTTP `GET /v1/sale-offers`.
    /// - Remark: Generated from `#/paths//v1/sale-offers/get(getSaleOffers)`.
    func getSaleOffers(_ input: Operations.getSaleOffers.Input) async throws -> Operations.getSaleOffers.Output
    /// Fetch info
    ///
    /// - Remark: HTTP `GET /v1/infos`.
    /// - Remark: Generated from `#/paths//v1/infos/get(fetchInfo)`.
    func fetchInfo(_ input: Operations.fetchInfo.Input) async throws -> Operations.fetchInfo.Output
    /// Health Check
    ///
    /// Endpoint to check the health of the service
    ///
    /// - Remark: HTTP `GET /v1/health-check`.
    /// - Remark: Generated from `#/paths//v1/health-check/get`.
    func get_sol_v1_sol_health_hyphen_check(_ input: Operations.get_sol_v1_sol_health_hyphen_check.Input) async throws -> Operations.get_sol_v1_sol_health_hyphen_check.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Retrieve applications
    ///
    /// Get all app
    ///
    /// - Remark: HTTP `GET /v1/apps`.
    /// - Remark: Generated from `#/paths//v1/apps/get(getApps)`.
    public func getApps(headers: Operations.getApps.Input.Headers = .init()) async throws -> Operations.getApps.Output {
        try await getApps(Operations.getApps.Input(headers: headers))
    }
    /// Retrieve application
    ///
    /// Get App Information
    ///
    /// - Remark: HTTP `GET /v1/apps/{id}`.
    /// - Remark: Generated from `#/paths//v1/apps/{id}/get(getApp)`.
    public func getApp(
        path: Operations.getApp.Input.Path,
        headers: Operations.getApp.Input.Headers = .init()
    ) async throws -> Operations.getApp.Output {
        try await getApp(Operations.getApp.Input(
            path: path,
            headers: headers
        ))
    }
    /// Retrieve application features
    ///
    /// Get all features associated with a specific application
    ///
    /// - Remark: HTTP `GET /v1/apps/{id}/features`.
    /// - Remark: Generated from `#/paths//v1/apps/{id}/features/get(getAppFeatures)`.
    public func getAppFeatures(
        path: Operations.getAppFeatures.Input.Path,
        query: Operations.getAppFeatures.Input.Query = .init(),
        headers: Operations.getAppFeatures.Input.Headers = .init()
    ) async throws -> Operations.getAppFeatures.Output {
        try await getAppFeatures(Operations.getAppFeatures.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Retrieve application ads
    ///
    /// Get all ads features associated with a specific application
    ///
    /// - Remark: HTTP `GET /v1/apps/{id}/ads`.
    /// - Remark: Generated from `#/paths//v1/apps/{id}/ads/get(getAppAds)`.
    public func getAppAds(
        path: Operations.getAppAds.Input.Path,
        headers: Operations.getAppAds.Input.Headers = .init()
    ) async throws -> Operations.getAppAds.Output {
        try await getAppAds(Operations.getAppAds.Input(
            path: path,
            headers: headers
        ))
    }
    /// Retrieve application ad
    ///
    /// Get ad associated with a specific application
    ///
    /// - Remark: HTTP `GET /v1/apps/{id}/ad`.
    /// - Remark: Generated from `#/paths//v1/apps/{id}/ad/get(getAppAd)`.
    public func getAppAd(
        path: Operations.getAppAd.Input.Path,
        headers: Operations.getAppAd.Input.Headers = .init()
    ) async throws -> Operations.getAppAd.Output {
        try await getAppAd(Operations.getAppAd.Input(
            path: path,
            headers: headers
        ))
    }
    /// Retrieve application App Store products ids
    ///
    /// Get all subscription ids associated with a specific application
    ///
    /// - Remark: HTTP `GET /v1/apps/{id}/app-store/productIds`.
    /// - Remark: Generated from `#/paths//v1/apps/{id}/app-store/productIds/get(GetAppStoreProductIds)`.
    public func GetAppStoreProductIds(
        path: Operations.GetAppStoreProductIds.Input.Path,
        headers: Operations.GetAppStoreProductIds.Input.Headers = .init()
    ) async throws -> Operations.GetAppStoreProductIds.Output {
        try await GetAppStoreProductIds(Operations.GetAppStoreProductIds.Input(
            path: path,
            headers: headers
        ))
    }
    /// Retrieve application features
    ///
    /// Get all features associated with a specific application
    ///
    /// - Remark: HTTP `GET /v1/features/{id}`.
    /// - Remark: Generated from `#/paths//v1/features/{id}/get(getAppFeature)`.
    public func getAppFeature(
        path: Operations.getAppFeature.Input.Path,
        headers: Operations.getAppFeature.Input.Headers = .init()
    ) async throws -> Operations.getAppFeature.Output {
        try await getAppFeature(Operations.getAppFeature.Input(
            path: path,
            headers: headers
        ))
    }
    /// Retrieve StoreKit offers
    ///
    /// Get all sale offers
    ///
    /// - Remark: HTTP `GET /v1/sale-offers`.
    /// - Remark: Generated from `#/paths//v1/sale-offers/get(getSaleOffers)`.
    public func getSaleOffers(headers: Operations.getSaleOffers.Input.Headers = .init()) async throws -> Operations.getSaleOffers.Output {
        try await getSaleOffers(Operations.getSaleOffers.Input(headers: headers))
    }
    /// Fetch info
    ///
    /// - Remark: HTTP `GET /v1/infos`.
    /// - Remark: Generated from `#/paths//v1/infos/get(fetchInfo)`.
    public func fetchInfo(headers: Operations.fetchInfo.Input.Headers = .init()) async throws -> Operations.fetchInfo.Output {
        try await fetchInfo(Operations.fetchInfo.Input(headers: headers))
    }
    /// Health Check
    ///
    /// Endpoint to check the health of the service
    ///
    /// - Remark: HTTP `GET /v1/health-check`.
    /// - Remark: Generated from `#/paths//v1/health-check/get`.
    public func get_sol_v1_sol_health_hyphen_check(headers: Operations.get_sol_v1_sol_health_hyphen_check.Input.Headers = .init()) async throws -> Operations.get_sol_v1_sol_health_hyphen_check.Output {
        try await get_sol_v1_sol_health_hyphen_check(Operations.get_sol_v1_sol_health_hyphen_check.Input(headers: headers))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    /// API url
    public enum Server1 {
        /// API url
        public static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://api.oversize.app",
                variables: []
            )
        }
    }
    /// API url
    @available(*, deprecated, renamed: "Servers.Server1.url")
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.oversize.app",
            variables: []
        )
    }
    /// Test API url
    public enum Server2 {
        /// Test API url
        public static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://test.api.oversize.app",
                variables: []
            )
        }
    }
    /// Test API url
    @available(*, deprecated, renamed: "Servers.Server2.url")
    public static func server2() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://test.api.oversize.app",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// - Remark: Generated from `#/components/schemas/App`.
        public struct App: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/App/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/App/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/App/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/App/subtitle`.
            public var subtitle: Swift.String
            /// - Remark: Generated from `#/components/schemas/App/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/App/address`.
            public var address: Swift.String
            /// - Remark: Generated from `#/components/schemas/App/termsDate`.
            public var termsDate: Swift.String
            /// - Remark: Generated from `#/components/schemas/App/termsAdditions`.
            public var termsAdditions: [Swift.String]?
            /// Creates a new `App`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - title:
            ///   - subtitle:
            ///   - description:
            ///   - address:
            ///   - termsDate:
            ///   - termsAdditions:
            public init(
                id: Swift.Int,
                name: Swift.String,
                title: Swift.String,
                subtitle: Swift.String,
                description: Swift.String? = nil,
                address: Swift.String,
                termsDate: Swift.String,
                termsAdditions: [Swift.String]? = nil
            ) {
                self.id = id
                self.name = name
                self.title = title
                self.subtitle = subtitle
                self.description = description
                self.address = address
                self.termsDate = termsDate
                self.termsAdditions = termsAdditions
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case title
                case subtitle
                case description
                case address
                case termsDate
                case termsAdditions
            }
        }
        /// - Remark: Generated from `#/components/schemas/Feature`.
        public struct Feature: Codable, Hashable, Sendable {
            /// Computed identifier from image, title, and subtitle
            ///
            /// - Remark: Generated from `#/components/schemas/Feature/id`.
            public var id: Swift.Int
            /// Title of the store feature
            ///
            /// - Remark: Generated from `#/components/schemas/Feature/title`.
            public var title: Swift.String
            /// Subtitle of the store feature
            ///
            /// - Remark: Generated from `#/components/schemas/Feature/subtitle`.
            public var subtitle: Swift.String?
            /// Description of the store feature
            ///
            /// - Remark: Generated from `#/components/schemas/Feature/description`.
            public var description: Swift.String?
            /// Size of the text content
            ///
            /// - Remark: Generated from `#/components/schemas/Feature/textSize`.
            @frozen public enum textSizePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case small = "small"
                case medium = "medium"
                case large = "large"
            }
            /// Size of the text content
            ///
            /// - Remark: Generated from `#/components/schemas/Feature/textSize`.
            public var textSize: Components.Schemas.Feature.textSizePayload
            /// Alignment of the text content
            ///
            /// - Remark: Generated from `#/components/schemas/Feature/textAlignment`.
            @frozen public enum textAlignmentPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case leading = "leading"
                case center = "center"
                case trailing = "trailing"
            }
            /// Alignment of the text content
            ///
            /// - Remark: Generated from `#/components/schemas/Feature/textAlignment`.
            public var textAlignment: Components.Schemas.Feature.textAlignmentPayload
            /// URL for the feature icon
            ///
            /// - Remark: Generated from `#/components/schemas/Feature/iconUrl`.
            public var iconUrl: Swift.String?
            /// URL for the feature icon
            ///
            /// - Remark: Generated from `#/components/schemas/Feature/illustrationUrl`.
            public var illustrationUrl: Swift.String?
            /// URL for the feature screenshot
            ///
            /// - Remark: Generated from `#/components/schemas/Feature/screenshotUrl`.
            public var screenshotUrl: Swift.String?
            /// Vertical alignment of the screenshot
            ///
            /// - Remark: Generated from `#/components/schemas/Feature/screenshotAlignment`.
            @frozen public enum screenshotAlignmentPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case top = "top"
                case bottom = "bottom"
            }
            /// Vertical alignment of the screenshot
            ///
            /// - Remark: Generated from `#/components/schemas/Feature/screenshotAlignment`.
            public var screenshotAlignment: Components.Schemas.Feature.screenshotAlignmentPayload?
            /// Background color value in hex format without
            ///
            /// - Remark: Generated from `#/components/schemas/Feature/backgroundColor`.
            public var backgroundColor: Swift.String?
            /// Creates a new `Feature`.
            ///
            /// - Parameters:
            ///   - id: Computed identifier from image, title, and subtitle
            ///   - title: Title of the store feature
            ///   - subtitle: Subtitle of the store feature
            ///   - description: Description of the store feature
            ///   - textSize: Size of the text content
            ///   - textAlignment: Alignment of the text content
            ///   - iconUrl: URL for the feature icon
            ///   - illustrationUrl: URL for the feature icon
            ///   - screenshotUrl: URL for the feature screenshot
            ///   - screenshotAlignment: Vertical alignment of the screenshot
            ///   - backgroundColor: Background color value in hex format without
            public init(
                id: Swift.Int,
                title: Swift.String,
                subtitle: Swift.String? = nil,
                description: Swift.String? = nil,
                textSize: Components.Schemas.Feature.textSizePayload,
                textAlignment: Components.Schemas.Feature.textAlignmentPayload,
                iconUrl: Swift.String? = nil,
                illustrationUrl: Swift.String? = nil,
                screenshotUrl: Swift.String? = nil,
                screenshotAlignment: Components.Schemas.Feature.screenshotAlignmentPayload? = nil,
                backgroundColor: Swift.String? = nil
            ) {
                self.id = id
                self.title = title
                self.subtitle = subtitle
                self.description = description
                self.textSize = textSize
                self.textAlignment = textAlignment
                self.iconUrl = iconUrl
                self.illustrationUrl = illustrationUrl
                self.screenshotUrl = screenshotUrl
                self.screenshotAlignment = screenshotAlignment
                self.backgroundColor = backgroundColor
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case title
                case subtitle
                case description
                case textSize
                case textAlignment
                case iconUrl
                case illustrationUrl
                case screenshotUrl
                case screenshotAlignment
                case backgroundColor
            }
        }
        /// - Remark: Generated from `#/components/schemas/Ad`.
        public struct Ad: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Ad/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Ad/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/Ad/description`.
            public var description: Swift.String
            /// - Remark: Generated from `#/components/schemas/Ad/iconURL`.
            public var iconURL: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Ad/priority`.
            public var priority: Swift.Int?
            /// Creates a new `Ad`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - title:
            ///   - description:
            ///   - iconURL:
            ///   - priority:
            public init(
                id: Swift.Int,
                title: Swift.String,
                description: Swift.String,
                iconURL: Swift.String? = nil,
                priority: Swift.Int? = nil
            ) {
                self.id = id
                self.title = title
                self.description = description
                self.iconURL = iconURL
                self.priority = priority
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case title
                case description
                case iconURL
                case priority
            }
        }
        /// - Remark: Generated from `#/components/schemas/SaleOffer`.
        public struct SaleOffer: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SaleOffer/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/SaleOffer/badge`.
            public var badge: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SaleOffer/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/SaleOffer/headline`.
            public var headline: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SaleOffer/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SaleOffer/imageURL`.
            public var imageURL: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SaleOffer/startDate`.
            public var startDate: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/SaleOffer/endDate`.
            public var endDate: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/SaleOffer/accentColor`.
            public var accentColor: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SaleOffer/effect`.
            @frozen public enum effectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case snow = "snow"
            }
            /// - Remark: Generated from `#/components/schemas/SaleOffer/effect`.
            public var effect: Components.Schemas.SaleOffer.effectPayload?
            /// - Remark: Generated from `#/components/schemas/SaleOffer/region`.
            public var region: [Swift.String]?
            /// Creates a new `SaleOffer`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - badge:
            ///   - title:
            ///   - headline:
            ///   - description:
            ///   - imageURL:
            ///   - startDate:
            ///   - endDate:
            ///   - accentColor:
            ///   - effect:
            ///   - region:
            public init(
                id: Swift.Int,
                badge: Swift.String? = nil,
                title: Swift.String,
                headline: Swift.String? = nil,
                description: Swift.String? = nil,
                imageURL: Swift.String? = nil,
                startDate: Foundation.Date,
                endDate: Foundation.Date,
                accentColor: Swift.String? = nil,
                effect: Components.Schemas.SaleOffer.effectPayload? = nil,
                region: [Swift.String]? = nil
            ) {
                self.id = id
                self.badge = badge
                self.title = title
                self.headline = headline
                self.description = description
                self.imageURL = imageURL
                self.startDate = startDate
                self.endDate = endDate
                self.accentColor = accentColor
                self.effect = effect
                self.region = region
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case badge
                case title
                case headline
                case description
                case imageURL
                case startDate
                case endDate
                case accentColor
                case effect
                case region
            }
        }
        /// - Remark: Generated from `#/components/schemas/SocialNetworkLink`.
        public struct SocialNetworkLink: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SocialNetworkLink/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/SocialNetworkLink/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/SocialNetworkLink/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/SocialNetworkLink/iconUrl`.
            public var iconUrl: Swift.String
            /// Creates a new `SocialNetworkLink`.
            ///
            /// - Parameters:
            ///   - title:
            ///   - id:
            ///   - url:
            ///   - iconUrl:
            public init(
                title: Swift.String,
                id: Swift.String,
                url: Swift.String,
                iconUrl: Swift.String
            ) {
                self.title = title
                self.id = id
                self.url = url
                self.iconUrl = iconUrl
            }
            public enum CodingKeys: String, CodingKey {
                case title
                case id
                case url
                case iconUrl
            }
        }
        /// - Remark: Generated from `#/components/schemas/DeveloperInfo`.
        public struct DeveloperInfo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeveloperInfo/email`.
            public var email: Swift.String
            /// - Remark: Generated from `#/components/schemas/DeveloperInfo/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/DeveloperInfo/socialNetworks`.
            public var socialNetworks: [Components.Schemas.SocialNetworkLink]
            /// - Remark: Generated from `#/components/schemas/DeveloperInfo/url`.
            public var url: Swift.String
            /// Creates a new `DeveloperInfo`.
            ///
            /// - Parameters:
            ///   - email:
            ///   - name:
            ///   - socialNetworks:
            ///   - url:
            public init(
                email: Swift.String,
                name: Swift.String,
                socialNetworks: [Components.Schemas.SocialNetworkLink],
                url: Swift.String
            ) {
                self.email = email
                self.name = name
                self.socialNetworks = socialNetworks
                self.url = url
            }
            public enum CodingKeys: String, CodingKey {
                case email
                case name
                case socialNetworks
                case url
            }
        }
        /// - Remark: Generated from `#/components/schemas/CompanyInfo`.
        public struct CompanyInfo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CompanyInfo/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/CompanyInfo/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/CompanyInfo/email`.
            public var email: Swift.String
            /// - Remark: Generated from `#/components/schemas/CompanyInfo/supportEmail`.
            public var supportEmail: Swift.String
            /// - Remark: Generated from `#/components/schemas/CompanyInfo/appStoreId`.
            public var appStoreId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CompanyInfo/socialNetworks`.
            public var socialNetworks: [Components.Schemas.SocialNetworkLink]
            /// Creates a new `CompanyInfo`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - url:
            ///   - email:
            ///   - supportEmail:
            ///   - appStoreId:
            ///   - socialNetworks:
            public init(
                name: Swift.String,
                url: Swift.String,
                email: Swift.String,
                supportEmail: Swift.String,
                appStoreId: Swift.String? = nil,
                socialNetworks: [Components.Schemas.SocialNetworkLink]
            ) {
                self.name = name
                self.url = url
                self.email = email
                self.supportEmail = supportEmail
                self.appStoreId = appStoreId
                self.socialNetworks = socialNetworks
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case url
                case email
                case supportEmail
                case appStoreId
                case socialNetworks
            }
        }
        /// - Remark: Generated from `#/components/schemas/Info`.
        public struct Info: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Info/developer`.
            public var developer: Components.Schemas.DeveloperInfo
            /// - Remark: Generated from `#/components/schemas/Info/company`.
            public var company: Components.Schemas.CompanyInfo
            /// Creates a new `Info`.
            ///
            /// - Parameters:
            ///   - developer:
            ///   - company:
            public init(
                developer: Components.Schemas.DeveloperInfo,
                company: Components.Schemas.CompanyInfo
            ) {
                self.developer = developer
                self.company = company
            }
            public enum CodingKeys: String, CodingKey {
                case developer
                case company
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Retrieve applications
    ///
    /// Get all app
    ///
    /// - Remark: HTTP `GET /v1/apps`.
    /// - Remark: Generated from `#/paths//v1/apps/get(getApps)`.
    public enum getApps {
        public static let id: Swift.String = "getApps"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/apps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getApps.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getApps.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getApps.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.getApps.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/apps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/apps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.App])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.App] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getApps.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getApps.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// A success response
            ///
            /// - Remark: Generated from `#/paths//v1/apps/get(getApps)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getApps.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getApps.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/apps/GET/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/apps/GET/responses/500/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v1/apps/GET/responses/500/content/json/error`.
                        public var error: Swift.String?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - error:
                        public init(error: Swift.String? = nil) {
                            self.error = error
                        }
                        public enum CodingKeys: String, CodingKey {
                            case error
                        }
                    }
                    /// - Remark: Generated from `#/paths/v1/apps/GET/responses/500/content/application\/json`.
                    case json(Operations.getApps.Output.InternalServerError.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getApps.Output.InternalServerError.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getApps.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getApps.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//v1/apps/get(getApps)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.getApps.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.getApps.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieve application
    ///
    /// Get App Information
    ///
    /// - Remark: HTTP `GET /v1/apps/{id}`.
    /// - Remark: Generated from `#/paths//v1/apps/{id}/get(getApp)`.
    public enum getApp {
        public static let id: Swift.String = "getApp"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/apps/{id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The application id used in the returned feature
                ///
                /// - Remark: Generated from `#/paths/v1/apps/{id}/GET/path/id`.
                public var id: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: The application id used in the returned feature
                public init(id: Swift.Int) {
                    self.id = id
                }
            }
            public var path: Operations.getApp.Input.Path
            /// - Remark: Generated from `#/paths/v1/apps/{id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getApp.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getApp.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getApp.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getApp.Input.Path,
                headers: Operations.getApp.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/apps/{id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/apps/{id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.App)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.App {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getApp.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getApp.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// A success response
            ///
            /// - Remark: Generated from `#/paths//v1/apps/{id}/get(getApp)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getApp.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getApp.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/apps/{id}/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/apps/{id}/GET/responses/404/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v1/apps/{id}/GET/responses/404/content/json/error`.
                        public var error: Swift.String?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - error:
                        public init(error: Swift.String? = nil) {
                            self.error = error
                        }
                        public enum CodingKeys: String, CodingKey {
                            case error
                        }
                    }
                    /// - Remark: Generated from `#/paths/v1/apps/{id}/GET/responses/404/content/application\/json`.
                    case json(Operations.getApp.Output.NotFound.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getApp.Output.NotFound.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getApp.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getApp.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Feature not found
            ///
            /// - Remark: Generated from `#/paths//v1/apps/{id}/get(getApp)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.getApp.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.getApp.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/apps/{id}/GET/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/apps/{id}/GET/responses/500/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v1/apps/{id}/GET/responses/500/content/json/error`.
                        public var error: Swift.String?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - error:
                        public init(error: Swift.String? = nil) {
                            self.error = error
                        }
                        public enum CodingKeys: String, CodingKey {
                            case error
                        }
                    }
                    /// - Remark: Generated from `#/paths/v1/apps/{id}/GET/responses/500/content/application\/json`.
                    case json(Operations.getApp.Output.InternalServerError.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getApp.Output.InternalServerError.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getApp.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getApp.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//v1/apps/{id}/get(getApp)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.getApp.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.getApp.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieve application features
    ///
    /// Get all features associated with a specific application
    ///
    /// - Remark: HTTP `GET /v1/apps/{id}/features`.
    /// - Remark: Generated from `#/paths//v1/apps/{id}/features/get(getAppFeatures)`.
    public enum getAppFeatures {
        public static let id: Swift.String = "getAppFeatures"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/apps/{id}/features/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The application id used in the returned features
                ///
                /// - Remark: Generated from `#/paths/v1/apps/{id}/features/GET/path/id`.
                public var id: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: The application id used in the returned features
                public init(id: Swift.Int) {
                    self.id = id
                }
            }
            public var path: Operations.getAppFeatures.Input.Path
            /// - Remark: Generated from `#/paths/v1/apps/{id}/features/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/apps/{id}/features/GET/query/filter`.
                @frozen public enum filterPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case premium = "premium"
                    case onboarding = "onboarding"
                }
                /// Filter features
                ///
                /// - Remark: Generated from `#/paths/v1/apps/{id}/features/GET/query/filter`.
                public var filter: Operations.getAppFeatures.Input.Query.filterPayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - filter: Filter features
                public init(filter: Operations.getAppFeatures.Input.Query.filterPayload? = nil) {
                    self.filter = filter
                }
            }
            public var query: Operations.getAppFeatures.Input.Query
            /// - Remark: Generated from `#/paths/v1/apps/{id}/features/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAppFeatures.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAppFeatures.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getAppFeatures.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getAppFeatures.Input.Path,
                query: Operations.getAppFeatures.Input.Query = .init(),
                headers: Operations.getAppFeatures.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/apps/{id}/features/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/apps/{id}/features/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Feature])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Feature] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAppFeatures.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAppFeatures.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// A success response
            ///
            /// - Remark: Generated from `#/paths//v1/apps/{id}/features/get(getAppFeatures)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAppFeatures.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAppFeatures.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/apps/{id}/features/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/apps/{id}/features/GET/responses/404/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v1/apps/{id}/features/GET/responses/404/content/json/error`.
                        public var error: Swift.String?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - error:
                        public init(error: Swift.String? = nil) {
                            self.error = error
                        }
                        public enum CodingKeys: String, CodingKey {
                            case error
                        }
                    }
                    /// - Remark: Generated from `#/paths/v1/apps/{id}/features/GET/responses/404/content/application\/json`.
                    case json(Operations.getAppFeatures.Output.NotFound.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getAppFeatures.Output.NotFound.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAppFeatures.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAppFeatures.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Application not found
            ///
            /// - Remark: Generated from `#/paths//v1/apps/{id}/features/get(getAppFeatures)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.getAppFeatures.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.getAppFeatures.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/apps/{id}/features/GET/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/apps/{id}/features/GET/responses/500/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v1/apps/{id}/features/GET/responses/500/content/json/error`.
                        public var error: Swift.String?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - error:
                        public init(error: Swift.String? = nil) {
                            self.error = error
                        }
                        public enum CodingKeys: String, CodingKey {
                            case error
                        }
                    }
                    /// - Remark: Generated from `#/paths/v1/apps/{id}/features/GET/responses/500/content/application\/json`.
                    case json(Operations.getAppFeatures.Output.InternalServerError.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getAppFeatures.Output.InternalServerError.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAppFeatures.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAppFeatures.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//v1/apps/{id}/features/get(getAppFeatures)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.getAppFeatures.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.getAppFeatures.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieve application ads
    ///
    /// Get all ads features associated with a specific application
    ///
    /// - Remark: HTTP `GET /v1/apps/{id}/ads`.
    /// - Remark: Generated from `#/paths//v1/apps/{id}/ads/get(getAppAds)`.
    public enum getAppAds {
        public static let id: Swift.String = "getAppAds"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/apps/{id}/ads/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The application id used in the returned features
                ///
                /// - Remark: Generated from `#/paths/v1/apps/{id}/ads/GET/path/id`.
                public var id: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: The application id used in the returned features
                public init(id: Swift.Int) {
                    self.id = id
                }
            }
            public var path: Operations.getAppAds.Input.Path
            /// - Remark: Generated from `#/paths/v1/apps/{id}/ads/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAppAds.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAppAds.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getAppAds.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getAppAds.Input.Path,
                headers: Operations.getAppAds.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/apps/{id}/ads/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/apps/{id}/ads/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Ad])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Ad] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAppAds.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAppAds.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// A success response
            ///
            /// - Remark: Generated from `#/paths//v1/apps/{id}/ads/get(getAppAds)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAppAds.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAppAds.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/apps/{id}/ads/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/apps/{id}/ads/GET/responses/404/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v1/apps/{id}/ads/GET/responses/404/content/json/error`.
                        public var error: Swift.String?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - error:
                        public init(error: Swift.String? = nil) {
                            self.error = error
                        }
                        public enum CodingKeys: String, CodingKey {
                            case error
                        }
                    }
                    /// - Remark: Generated from `#/paths/v1/apps/{id}/ads/GET/responses/404/content/application\/json`.
                    case json(Operations.getAppAds.Output.NotFound.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getAppAds.Output.NotFound.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAppAds.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAppAds.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Application ads not found
            ///
            /// - Remark: Generated from `#/paths//v1/apps/{id}/ads/get(getAppAds)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.getAppAds.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.getAppAds.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/apps/{id}/ads/GET/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/apps/{id}/ads/GET/responses/500/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v1/apps/{id}/ads/GET/responses/500/content/json/error`.
                        public var error: Swift.String?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - error:
                        public init(error: Swift.String? = nil) {
                            self.error = error
                        }
                        public enum CodingKeys: String, CodingKey {
                            case error
                        }
                    }
                    /// - Remark: Generated from `#/paths/v1/apps/{id}/ads/GET/responses/500/content/application\/json`.
                    case json(Operations.getAppAds.Output.InternalServerError.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getAppAds.Output.InternalServerError.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAppAds.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAppAds.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//v1/apps/{id}/ads/get(getAppAds)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.getAppAds.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.getAppAds.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieve application ad
    ///
    /// Get ad associated with a specific application
    ///
    /// - Remark: HTTP `GET /v1/apps/{id}/ad`.
    /// - Remark: Generated from `#/paths//v1/apps/{id}/ad/get(getAppAd)`.
    public enum getAppAd {
        public static let id: Swift.String = "getAppAd"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/apps/{id}/ad/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The application id used in the returned ad
                ///
                /// - Remark: Generated from `#/paths/v1/apps/{id}/ad/GET/path/id`.
                public var id: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: The application id used in the returned ad
                public init(id: Swift.Int) {
                    self.id = id
                }
            }
            public var path: Operations.getAppAd.Input.Path
            /// - Remark: Generated from `#/paths/v1/apps/{id}/ad/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAppAd.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAppAd.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getAppAd.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getAppAd.Input.Path,
                headers: Operations.getAppAd.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/apps/{id}/ad/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/apps/{id}/ad/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ad)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Ad {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAppAd.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAppAd.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// A success response
            ///
            /// - Remark: Generated from `#/paths//v1/apps/{id}/ad/get(getAppAd)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAppAd.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAppAd.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/apps/{id}/ad/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/apps/{id}/ad/GET/responses/404/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v1/apps/{id}/ad/GET/responses/404/content/json/error`.
                        public var error: Swift.String?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - error:
                        public init(error: Swift.String? = nil) {
                            self.error = error
                        }
                        public enum CodingKeys: String, CodingKey {
                            case error
                        }
                    }
                    /// - Remark: Generated from `#/paths/v1/apps/{id}/ad/GET/responses/404/content/application\/json`.
                    case json(Operations.getAppAd.Output.NotFound.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getAppAd.Output.NotFound.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAppAd.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAppAd.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Application ad not found
            ///
            /// - Remark: Generated from `#/paths//v1/apps/{id}/ad/get(getAppAd)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.getAppAd.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.getAppAd.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/apps/{id}/ad/GET/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/apps/{id}/ad/GET/responses/500/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v1/apps/{id}/ad/GET/responses/500/content/json/error`.
                        public var error: Swift.String?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - error:
                        public init(error: Swift.String? = nil) {
                            self.error = error
                        }
                        public enum CodingKeys: String, CodingKey {
                            case error
                        }
                    }
                    /// - Remark: Generated from `#/paths/v1/apps/{id}/ad/GET/responses/500/content/application\/json`.
                    case json(Operations.getAppAd.Output.InternalServerError.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getAppAd.Output.InternalServerError.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAppAd.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAppAd.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//v1/apps/{id}/ad/get(getAppAd)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.getAppAd.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.getAppAd.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieve application App Store products ids
    ///
    /// Get all subscription ids associated with a specific application
    ///
    /// - Remark: HTTP `GET /v1/apps/{id}/app-store/productIds`.
    /// - Remark: Generated from `#/paths//v1/apps/{id}/app-store/productIds/get(GetAppStoreProductIds)`.
    public enum GetAppStoreProductIds {
        public static let id: Swift.String = "GetAppStoreProductIds"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/apps/{id}/app-store/productIds/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The application id used in the returned features
                ///
                /// - Remark: Generated from `#/paths/v1/apps/{id}/app-store/productIds/GET/path/id`.
                public var id: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: The application id used in the returned features
                public init(id: Swift.Int) {
                    self.id = id
                }
            }
            public var path: Operations.GetAppStoreProductIds.Input.Path
            /// - Remark: Generated from `#/paths/v1/apps/{id}/app-store/productIds/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetAppStoreProductIds.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetAppStoreProductIds.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GetAppStoreProductIds.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.GetAppStoreProductIds.Input.Path,
                headers: Operations.GetAppStoreProductIds.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/apps/{id}/app-store/productIds/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/apps/{id}/app-store/productIds/GET/responses/200/content/application\/json`.
                    case json([Swift.String])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Swift.String] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetAppStoreProductIds.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetAppStoreProductIds.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// A success response
            ///
            /// - Remark: Generated from `#/paths//v1/apps/{id}/app-store/productIds/get(GetAppStoreProductIds)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetAppStoreProductIds.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GetAppStoreProductIds.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/apps/{id}/app-store/productIds/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/apps/{id}/app-store/productIds/GET/responses/404/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v1/apps/{id}/app-store/productIds/GET/responses/404/content/json/error`.
                        public var error: Swift.String?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - error:
                        public init(error: Swift.String? = nil) {
                            self.error = error
                        }
                        public enum CodingKeys: String, CodingKey {
                            case error
                        }
                    }
                    /// - Remark: Generated from `#/paths/v1/apps/{id}/app-store/productIds/GET/responses/404/content/application\/json`.
                    case json(Operations.GetAppStoreProductIds.Output.NotFound.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.GetAppStoreProductIds.Output.NotFound.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetAppStoreProductIds.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetAppStoreProductIds.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Application not found
            ///
            /// - Remark: Generated from `#/paths//v1/apps/{id}/app-store/productIds/get(GetAppStoreProductIds)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.GetAppStoreProductIds.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.GetAppStoreProductIds.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/apps/{id}/app-store/productIds/GET/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/apps/{id}/app-store/productIds/GET/responses/500/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v1/apps/{id}/app-store/productIds/GET/responses/500/content/json/error`.
                        public var error: Swift.String?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - error:
                        public init(error: Swift.String? = nil) {
                            self.error = error
                        }
                        public enum CodingKeys: String, CodingKey {
                            case error
                        }
                    }
                    /// - Remark: Generated from `#/paths/v1/apps/{id}/app-store/productIds/GET/responses/500/content/application\/json`.
                    case json(Operations.GetAppStoreProductIds.Output.InternalServerError.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.GetAppStoreProductIds.Output.InternalServerError.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetAppStoreProductIds.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.GetAppStoreProductIds.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//v1/apps/{id}/app-store/productIds/get(GetAppStoreProductIds)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.GetAppStoreProductIds.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.GetAppStoreProductIds.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieve application features
    ///
    /// Get all features associated with a specific application
    ///
    /// - Remark: HTTP `GET /v1/features/{id}`.
    /// - Remark: Generated from `#/paths//v1/features/{id}/get(getAppFeature)`.
    public enum getAppFeature {
        public static let id: Swift.String = "getAppFeature"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/features/{id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// The application id used in the returned feature
                ///
                /// - Remark: Generated from `#/paths/v1/features/{id}/GET/path/id`.
                public var id: Swift.Int
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: The application id used in the returned feature
                public init(id: Swift.Int) {
                    self.id = id
                }
            }
            public var path: Operations.getAppFeature.Input.Path
            /// - Remark: Generated from `#/paths/v1/features/{id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAppFeature.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAppFeature.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getAppFeature.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getAppFeature.Input.Path,
                headers: Operations.getAppFeature.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/features/{id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/features/{id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Feature)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Feature {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAppFeature.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAppFeature.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// A success response
            ///
            /// - Remark: Generated from `#/paths//v1/features/{id}/get(getAppFeature)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAppFeature.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAppFeature.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/features/{id}/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/features/{id}/GET/responses/404/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v1/features/{id}/GET/responses/404/content/json/error`.
                        public var error: Swift.String?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - error:
                        public init(error: Swift.String? = nil) {
                            self.error = error
                        }
                        public enum CodingKeys: String, CodingKey {
                            case error
                        }
                    }
                    /// - Remark: Generated from `#/paths/v1/features/{id}/GET/responses/404/content/application\/json`.
                    case json(Operations.getAppFeature.Output.NotFound.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getAppFeature.Output.NotFound.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAppFeature.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAppFeature.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// Feature not found
            ///
            /// - Remark: Generated from `#/paths//v1/features/{id}/get(getAppFeature)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.getAppFeature.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.getAppFeature.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/features/{id}/GET/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/features/{id}/GET/responses/500/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v1/features/{id}/GET/responses/500/content/json/error`.
                        public var error: Swift.String?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - error:
                        public init(error: Swift.String? = nil) {
                            self.error = error
                        }
                        public enum CodingKeys: String, CodingKey {
                            case error
                        }
                    }
                    /// - Remark: Generated from `#/paths/v1/features/{id}/GET/responses/500/content/application\/json`.
                    case json(Operations.getAppFeature.Output.InternalServerError.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getAppFeature.Output.InternalServerError.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAppFeature.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAppFeature.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//v1/features/{id}/get(getAppFeature)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.getAppFeature.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.getAppFeature.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieve StoreKit offers
    ///
    /// Get all sale offers
    ///
    /// - Remark: HTTP `GET /v1/sale-offers`.
    /// - Remark: Generated from `#/paths//v1/sale-offers/get(getSaleOffers)`.
    public enum getSaleOffers {
        public static let id: Swift.String = "getSaleOffers"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/sale-offers/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getSaleOffers.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getSaleOffers.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getSaleOffers.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.getSaleOffers.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/sale-offers/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/sale-offers/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.SaleOffer])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.SaleOffer] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getSaleOffers.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getSaleOffers.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// A success response
            ///
            /// - Remark: Generated from `#/paths//v1/sale-offers/get(getSaleOffers)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getSaleOffers.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getSaleOffers.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Fetch info
    ///
    /// - Remark: HTTP `GET /v1/infos`.
    /// - Remark: Generated from `#/paths//v1/infos/get(fetchInfo)`.
    public enum fetchInfo {
        public static let id: Swift.String = "fetchInfo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/infos/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fetchInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fetchInfo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.fetchInfo.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.fetchInfo.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/infos/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/infos/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Info)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Info {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.fetchInfo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.fetchInfo.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful operation
            ///
            /// - Remark: Generated from `#/paths//v1/infos/get(fetchInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.fetchInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.fetchInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Health Check
    ///
    /// Endpoint to check the health of the service
    ///
    /// - Remark: HTTP `GET /v1/health-check`.
    /// - Remark: Generated from `#/paths//v1/health-check/get`.
    public enum get_sol_v1_sol_health_hyphen_check {
        public static let id: Swift.String = "get/v1/health-check"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/health-check/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.get_sol_v1_sol_health_hyphen_check.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.get_sol_v1_sol_health_hyphen_check.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.get_sol_v1_sol_health_hyphen_check.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.get_sol_v1_sol_health_hyphen_check.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/health-check/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/health-check/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v1/health-check/GET/responses/200/content/json/status`.
                        @frozen public enum statusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case up = "up"
                            case down = "down"
                        }
                        /// - Remark: Generated from `#/paths/v1/health-check/GET/responses/200/content/json/status`.
                        public var status: Operations.get_sol_v1_sol_health_hyphen_check.Output.Ok.Body.jsonPayload.statusPayload?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - status:
                        public init(status: Operations.get_sol_v1_sol_health_hyphen_check.Output.Ok.Body.jsonPayload.statusPayload? = nil) {
                            self.status = status
                        }
                        public enum CodingKeys: String, CodingKey {
                            case status
                        }
                    }
                    /// - Remark: Generated from `#/paths/v1/health-check/GET/responses/200/content/application\/json`.
                    case json(Operations.get_sol_v1_sol_health_hyphen_check.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.get_sol_v1_sol_health_hyphen_check.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.get_sol_v1_sol_health_hyphen_check.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.get_sol_v1_sol_health_hyphen_check.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Service is healthy
            ///
            /// - Remark: Generated from `#/paths//v1/health-check/get/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.get_sol_v1_sol_health_hyphen_check.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.get_sol_v1_sol_health_hyphen_check.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/health-check/GET/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/health-check/GET/responses/500/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v1/health-check/GET/responses/500/content/json/status`.
                        public var status: Swift.String?
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - status:
                        public init(status: Swift.String? = nil) {
                            self.status = status
                        }
                        public enum CodingKeys: String, CodingKey {
                            case status
                        }
                    }
                    /// - Remark: Generated from `#/paths/v1/health-check/GET/responses/500/content/application\/json`.
                    case json(Operations.get_sol_v1_sol_health_hyphen_check.Output.InternalServerError.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.get_sol_v1_sol_health_hyphen_check.Output.InternalServerError.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.get_sol_v1_sol_health_hyphen_check.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.get_sol_v1_sol_health_hyphen_check.Output.InternalServerError.Body) {
                    self.body = body
                }
            }
            /// Service is not healthy
            ///
            /// - Remark: Generated from `#/paths//v1/health-check/get/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.get_sol_v1_sol_health_hyphen_check.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.get_sol_v1_sol_health_hyphen_check.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
