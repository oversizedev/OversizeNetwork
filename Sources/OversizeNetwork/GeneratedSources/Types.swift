// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Fetch apps
    ///
    /// - Remark: HTTP `GET /config/apps-short.json`.
    /// - Remark: Generated from `#/paths//config/apps-short.json/get(fetchApps)`.
    func fetchApps(_ input: Operations.fetchApps.Input) async throws -> Operations.fetchApps.Output
    /// Fetch info
    ///
    /// - Remark: HTTP `GET /config/info.json`.
    /// - Remark: Generated from `#/paths//config/info.json/get(fetchInfo)`.
    func fetchInfo(_ input: Operations.fetchInfo.Input) async throws -> Operations.fetchInfo.Output
    /// Fetch special offers events
    ///
    /// - Remark: HTTP `GET /config/special-offers.json`.
    /// - Remark: Generated from `#/paths//config/special-offers.json/get(fetchSpecialOffers)`.
    func fetchSpecialOffers(_ input: Operations.fetchSpecialOffers.Input) async throws -> Operations.fetchSpecialOffers.Output
    /// Find app by ID
    ///
    /// Returns a single app
    ///
    /// - Remark: HTTP `GET /config/apps/{appId}.json`.
    /// - Remark: Generated from `#/paths//config/apps/{appId}.json/get(fetchAppById)`.
    func fetchAppById(_ input: Operations.fetchAppById.Input) async throws -> Operations.fetchAppById.Output
    /// Fetch ads
    ///
    /// - Remark: HTTP `GET /config/ads.json`.
    /// - Remark: Generated from `#/paths//config/ads.json/get(fetchAds)`.
    func fetchAds(_ input: Operations.fetchAds.Input) async throws -> Operations.fetchAds.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Fetch apps
    ///
    /// - Remark: HTTP `GET /config/apps-short.json`.
    /// - Remark: Generated from `#/paths//config/apps-short.json/get(fetchApps)`.
    public func fetchApps(headers: Operations.fetchApps.Input.Headers = .init()) async throws -> Operations.fetchApps.Output {
        try await fetchApps(Operations.fetchApps.Input(headers: headers))
    }
    /// Fetch info
    ///
    /// - Remark: HTTP `GET /config/info.json`.
    /// - Remark: Generated from `#/paths//config/info.json/get(fetchInfo)`.
    public func fetchInfo(headers: Operations.fetchInfo.Input.Headers = .init()) async throws -> Operations.fetchInfo.Output {
        try await fetchInfo(Operations.fetchInfo.Input(headers: headers))
    }
    /// Fetch special offers events
    ///
    /// - Remark: HTTP `GET /config/special-offers.json`.
    /// - Remark: Generated from `#/paths//config/special-offers.json/get(fetchSpecialOffers)`.
    public func fetchSpecialOffers(headers: Operations.fetchSpecialOffers.Input.Headers = .init()) async throws -> Operations.fetchSpecialOffers.Output {
        try await fetchSpecialOffers(Operations.fetchSpecialOffers.Input(headers: headers))
    }
    /// Find app by ID
    ///
    /// Returns a single app
    ///
    /// - Remark: HTTP `GET /config/apps/{appId}.json`.
    /// - Remark: Generated from `#/paths//config/apps/{appId}.json/get(fetchAppById)`.
    public func fetchAppById(
        path: Operations.fetchAppById.Input.Path,
        headers: Operations.fetchAppById.Input.Headers = .init()
    ) async throws -> Operations.fetchAppById.Output {
        try await fetchAppById(Operations.fetchAppById.Input(
            path: path,
            headers: headers
        ))
    }
    /// Fetch ads
    ///
    /// - Remark: HTTP `GET /config/ads.json`.
    /// - Remark: Generated from `#/paths//config/ads.json/get(fetchAds)`.
    public func fetchAds(headers: Operations.fetchAds.Input.Headers = .init()) async throws -> Operations.fetchAds.Output {
        try await fetchAds(Operations.fetchAds.Input(headers: headers))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public enum Server1 {
        public static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://cdn.oversize.design",
                variables: []
            )
        }
    }
    @available(*, deprecated, renamed: "Servers.Server1.url")
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://cdn.oversize.design",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// - Remark: Generated from `#/components/schemas/Info`.
        public struct Info: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Info/developer`.
            public struct developerPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Info/developer/email`.
                public var email: Swift.String
                /// - Remark: Generated from `#/components/schemas/Info/developer/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/Info/developer/socialNetworks`.
                public var socialNetworks: [Components.Schemas.SocialNetworkLink]
                /// - Remark: Generated from `#/components/schemas/Info/developer/url`.
                public var url: Swift.String
                /// Creates a new `developerPayload`.
                ///
                /// - Parameters:
                ///   - email:
                ///   - name:
                ///   - socialNetworks:
                ///   - url:
                public init(
                    email: Swift.String,
                    name: Swift.String,
                    socialNetworks: [Components.Schemas.SocialNetworkLink],
                    url: Swift.String
                ) {
                    self.email = email
                    self.name = name
                    self.socialNetworks = socialNetworks
                    self.url = url
                }
                public enum CodingKeys: String, CodingKey {
                    case email
                    case name
                    case socialNetworks
                    case url
                }
            }
            /// - Remark: Generated from `#/components/schemas/Info/developer`.
            public var developer: Components.Schemas.Info.developerPayload
            /// - Remark: Generated from `#/components/schemas/Info/company`.
            public struct companyPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Info/company/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/Info/company/url`.
                public var url: Swift.String
                /// - Remark: Generated from `#/components/schemas/Info/company/cdnUrl`.
                public var cdnUrl: Swift.String
                /// - Remark: Generated from `#/components/schemas/Info/company/email`.
                public var email: Swift.String
                /// - Remark: Generated from `#/components/schemas/Info/company/supportEmail`.
                public var supportEmail: Swift.String
                /// - Remark: Generated from `#/components/schemas/Info/company/appStoreId`.
                public var appStoreId: Swift.String?
                /// - Remark: Generated from `#/components/schemas/Info/company/socialNetworks`.
                public var socialNetworks: [Components.Schemas.SocialNetworkLink]
                /// Creates a new `companyPayload`.
                ///
                /// - Parameters:
                ///   - name:
                ///   - url:
                ///   - cdnUrl:
                ///   - email:
                ///   - supportEmail:
                ///   - appStoreId:
                ///   - socialNetworks:
                public init(
                    name: Swift.String,
                    url: Swift.String,
                    cdnUrl: Swift.String,
                    email: Swift.String,
                    supportEmail: Swift.String,
                    appStoreId: Swift.String? = nil,
                    socialNetworks: [Components.Schemas.SocialNetworkLink]
                ) {
                    self.name = name
                    self.url = url
                    self.cdnUrl = cdnUrl
                    self.email = email
                    self.supportEmail = supportEmail
                    self.appStoreId = appStoreId
                    self.socialNetworks = socialNetworks
                }
                public enum CodingKeys: String, CodingKey {
                    case name
                    case url
                    case cdnUrl
                    case email
                    case supportEmail
                    case appStoreId
                    case socialNetworks
                }
            }
            /// - Remark: Generated from `#/components/schemas/Info/company`.
            public var company: Components.Schemas.Info.companyPayload
            /// Creates a new `Info`.
            ///
            /// - Parameters:
            ///   - developer:
            ///   - company:
            public init(
                developer: Components.Schemas.Info.developerPayload,
                company: Components.Schemas.Info.companyPayload
            ) {
                self.developer = developer
                self.company = company
            }
            public enum CodingKeys: String, CodingKey {
                case developer
                case company
            }
        }
        /// - Remark: Generated from `#/components/schemas/SocialNetworkLink`.
        public struct SocialNetworkLink: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SocialNetworkLink/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/SocialNetworkLink/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/SocialNetworkLink/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/SocialNetworkLink/iconUrl`.
            public var iconUrl: Swift.String
            /// Creates a new `SocialNetworkLink`.
            ///
            /// - Parameters:
            ///   - title:
            ///   - id:
            ///   - url:
            ///   - iconUrl:
            public init(
                title: Swift.String,
                id: Swift.String,
                url: Swift.String,
                iconUrl: Swift.String
            ) {
                self.title = title
                self.id = id
                self.url = url
                self.iconUrl = iconUrl
            }
            public enum CodingKeys: String, CodingKey {
                case title
                case id
                case url
                case iconUrl
            }
        }
        /// - Remark: Generated from `#/components/schemas/AppShort`.
        public struct AppShort: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AppShort/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/AppShort/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/AppShort/subtitle`.
            public var subtitle: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppShort/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppShort/address`.
            public var address: Swift.String
            /// - Remark: Generated from `#/components/schemas/AppShort/appStoreId`.
            public var appStoreId: Swift.String
            /// - Remark: Generated from `#/components/schemas/AppShort/termsDate`.
            public var termsDate: Foundation.Date
            /// Creates a new `AppShort`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - title:
            ///   - subtitle:
            ///   - description:
            ///   - address:
            ///   - appStoreId:
            ///   - termsDate:
            public init(
                name: Swift.String,
                title: Swift.String,
                subtitle: Swift.String? = nil,
                description: Swift.String? = nil,
                address: Swift.String,
                appStoreId: Swift.String,
                termsDate: Foundation.Date
            ) {
                self.name = name
                self.title = title
                self.subtitle = subtitle
                self.description = description
                self.address = address
                self.appStoreId = appStoreId
                self.termsDate = termsDate
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case title
                case subtitle
                case description
                case address
                case appStoreId
                case termsDate
            }
        }
        /// - Remark: Generated from `#/components/schemas/AppDetail`.
        public struct AppDetail: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AppDetail/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/AppDetail/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/AppDetail/subtitle`.
            public var subtitle: Swift.String
            /// - Remark: Generated from `#/components/schemas/AppDetail/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppDetail/address`.
            public var address: Swift.String
            /// - Remark: Generated from `#/components/schemas/AppDetail/appStoreId`.
            public var appStoreId: Swift.String
            /// - Remark: Generated from `#/components/schemas/AppDetail/termsDate`.
            public var termsDate: Swift.String
            /// - Remark: Generated from `#/components/schemas/AppDetail/termsAdditionsPayload`.
            @frozen public enum termsAdditionsPayloadPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case yandexAds = "yandexAds"
                case adMob = "adMob"
                case firebaseAnalytics = "firebaseAnalytics"
            }
            /// - Remark: Generated from `#/components/schemas/AppDetail/termsAdditions`.
            public typealias termsAdditionsPayload = [Components.Schemas.AppDetail.termsAdditionsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/AppDetail/termsAdditions`.
            public var termsAdditions: Components.Schemas.AppDetail.termsAdditionsPayload?
            /// - Remark: Generated from `#/components/schemas/AppDetail/platforms`.
            public struct platformsPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/AppDetail/platforms/iOS`.
                public var iOS: Components.Schemas.Platform?
                /// - Remark: Generated from `#/components/schemas/AppDetail/platforms/iPadOS`.
                public var iPadOS: Components.Schemas.Platform?
                /// - Remark: Generated from `#/components/schemas/AppDetail/platforms/macOS`.
                public var macOS: Components.Schemas.Platform?
                /// - Remark: Generated from `#/components/schemas/AppDetail/platforms/tvOS`.
                public var tvOS: Components.Schemas.Platform?
                /// - Remark: Generated from `#/components/schemas/AppDetail/platforms/watchOS`.
                public var watchOS: Components.Schemas.Platform?
                /// - Remark: Generated from `#/components/schemas/AppDetail/platforms/visionOS`.
                public var visionOS: Components.Schemas.Platform?
                /// Creates a new `platformsPayload`.
                ///
                /// - Parameters:
                ///   - iOS:
                ///   - iPadOS:
                ///   - macOS:
                ///   - tvOS:
                ///   - watchOS:
                ///   - visionOS:
                public init(
                    iOS: Components.Schemas.Platform? = nil,
                    iPadOS: Components.Schemas.Platform? = nil,
                    macOS: Components.Schemas.Platform? = nil,
                    tvOS: Components.Schemas.Platform? = nil,
                    watchOS: Components.Schemas.Platform? = nil,
                    visionOS: Components.Schemas.Platform? = nil
                ) {
                    self.iOS = iOS
                    self.iPadOS = iPadOS
                    self.macOS = macOS
                    self.tvOS = tvOS
                    self.watchOS = watchOS
                    self.visionOS = visionOS
                }
                public enum CodingKeys: String, CodingKey {
                    case iOS
                    case iPadOS
                    case macOS
                    case tvOS
                    case watchOS
                    case visionOS
                }
            }
            /// - Remark: Generated from `#/components/schemas/AppDetail/platforms`.
            public var platforms: Components.Schemas.AppDetail.platformsPayload
            /// Creates a new `AppDetail`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - title:
            ///   - subtitle:
            ///   - description:
            ///   - address:
            ///   - appStoreId:
            ///   - termsDate:
            ///   - termsAdditions:
            ///   - platforms:
            public init(
                name: Swift.String,
                title: Swift.String,
                subtitle: Swift.String,
                description: Swift.String? = nil,
                address: Swift.String,
                appStoreId: Swift.String,
                termsDate: Swift.String,
                termsAdditions: Components.Schemas.AppDetail.termsAdditionsPayload? = nil,
                platforms: Components.Schemas.AppDetail.platformsPayload
            ) {
                self.name = name
                self.title = title
                self.subtitle = subtitle
                self.description = description
                self.address = address
                self.appStoreId = appStoreId
                self.termsDate = termsDate
                self.termsAdditions = termsAdditions
                self.platforms = platforms
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case title
                case subtitle
                case description
                case address
                case appStoreId
                case termsDate
                case termsAdditions
                case platforms
            }
        }
        /// - Remark: Generated from `#/components/schemas/Platform`.
        public struct Platform: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Platform/blocks`.
            public var blocks: [Components.Schemas.AppDetailBlock]?
            /// Creates a new `Platform`.
            ///
            /// - Parameters:
            ///   - blocks:
            public init(blocks: [Components.Schemas.AppDetailBlock]? = nil) {
                self.blocks = blocks
            }
            public enum CodingKeys: String, CodingKey {
                case blocks
            }
        }
        /// - Remark: Generated from `#/components/schemas/AppDetailBlock`.
        public struct AppDetailBlock: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AppDetailBlock/design`.
            @frozen public enum designPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case cards = "cards"
                case cardFeatures = "cardFeatures"
            }
            /// - Remark: Generated from `#/components/schemas/AppDetailBlock/design`.
            public var design: Components.Schemas.AppDetailBlock.designPayload
            /// - Remark: Generated from `#/components/schemas/AppDetailBlock/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/AppDetailBlock/subtitle`.
            public var subtitle: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppDetailBlock/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppDetailBlock/color`.
            public var color: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppDetailBlock/grid`.
            @frozen public enum gridPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case grid1_2 = "grid1_2"
            }
            /// - Remark: Generated from `#/components/schemas/AppDetailBlock/grid`.
            public var grid: Components.Schemas.AppDetailBlock.gridPayload?
            /// - Remark: Generated from `#/components/schemas/AppDetailBlock/screenshotUrl`.
            public var screenshotUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppDetailBlock/items`.
            public var items: [Components.Schemas.AppDetailFeature]
            /// Creates a new `AppDetailBlock`.
            ///
            /// - Parameters:
            ///   - design:
            ///   - title:
            ///   - subtitle:
            ///   - description:
            ///   - color:
            ///   - grid:
            ///   - screenshotUrl:
            ///   - items:
            public init(
                design: Components.Schemas.AppDetailBlock.designPayload,
                title: Swift.String,
                subtitle: Swift.String? = nil,
                description: Swift.String? = nil,
                color: Swift.String? = nil,
                grid: Components.Schemas.AppDetailBlock.gridPayload? = nil,
                screenshotUrl: Swift.String? = nil,
                items: [Components.Schemas.AppDetailFeature]
            ) {
                self.design = design
                self.title = title
                self.subtitle = subtitle
                self.description = description
                self.color = color
                self.grid = grid
                self.screenshotUrl = screenshotUrl
                self.items = items
            }
            public enum CodingKeys: String, CodingKey {
                case design
                case title
                case subtitle
                case description
                case color
                case grid
                case screenshotUrl
                case items
            }
        }
        /// - Remark: Generated from `#/components/schemas/AppDetailFeature`.
        public struct AppDetailFeature: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AppDetailFeature/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/AppDetailFeature/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppDetailFeature/alignment`.
            @frozen public enum alignmentPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case left = "left"
                case center = "center"
                case right = "right"
            }
            /// - Remark: Generated from `#/components/schemas/AppDetailFeature/alignment`.
            public var alignment: Components.Schemas.AppDetailFeature.alignmentPayload?
            /// - Remark: Generated from `#/components/schemas/AppDetailFeature/textSize`.
            @frozen public enum textSizePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case small = "small"
                case medium = "medium"
                case large = "large"
            }
            /// - Remark: Generated from `#/components/schemas/AppDetailFeature/textSize`.
            public var textSize: Components.Schemas.AppDetailFeature.textSizePayload?
            /// - Remark: Generated from `#/components/schemas/AppDetailFeature/screenshotUrl`.
            public var screenshotUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AppDetailFeature/iconUrl`.
            public var iconUrl: Swift.String?
            /// Creates a new `AppDetailFeature`.
            ///
            /// - Parameters:
            ///   - title:
            ///   - description:
            ///   - alignment:
            ///   - textSize:
            ///   - screenshotUrl:
            ///   - iconUrl:
            public init(
                title: Swift.String,
                description: Swift.String? = nil,
                alignment: Components.Schemas.AppDetailFeature.alignmentPayload? = nil,
                textSize: Components.Schemas.AppDetailFeature.textSizePayload? = nil,
                screenshotUrl: Swift.String? = nil,
                iconUrl: Swift.String? = nil
            ) {
                self.title = title
                self.description = description
                self.alignment = alignment
                self.textSize = textSize
                self.screenshotUrl = screenshotUrl
                self.iconUrl = iconUrl
            }
            public enum CodingKeys: String, CodingKey {
                case title
                case description
                case alignment
                case textSize
                case screenshotUrl
                case iconUrl
            }
        }
        /// - Remark: Generated from `#/components/schemas/SpecialOffers`.
        public struct SpecialOffers: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SpecialOffers/offers`.
            public var offers: [Components.Schemas.SpecialOffer]
            /// Creates a new `SpecialOffers`.
            ///
            /// - Parameters:
            ///   - offers:
            public init(offers: [Components.Schemas.SpecialOffer]) {
                self.offers = offers
            }
            public enum CodingKeys: String, CodingKey {
                case offers
            }
        }
        /// - Remark: Generated from `#/components/schemas/SpecialOffer`.
        public struct SpecialOffer: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SpecialOffer/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/SpecialOffer/badge`.
            public var badge: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SpecialOffer/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/SpecialOffer/headline`.
            public var headline: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SpecialOffer/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SpecialOffer/imageURL`.
            public var imageURL: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SpecialOffer/startDate`.
            public var startDate: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/SpecialOffer/endDate`.
            public var endDate: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/SpecialOffer/accentColor`.
            public var accentColor: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SpecialOffer/effect`.
            @frozen public enum effectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case snow = "snow"
            }
            /// - Remark: Generated from `#/components/schemas/SpecialOffer/effect`.
            public var effect: Components.Schemas.SpecialOffer.effectPayload?
            /// - Remark: Generated from `#/components/schemas/SpecialOffer/region`.
            public var region: [Swift.String]?
            /// Creates a new `SpecialOffer`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - badge:
            ///   - title:
            ///   - headline:
            ///   - description:
            ///   - imageURL:
            ///   - startDate:
            ///   - endDate:
            ///   - accentColor:
            ///   - effect:
            ///   - region:
            public init(
                id: Swift.String,
                badge: Swift.String? = nil,
                title: Swift.String,
                headline: Swift.String? = nil,
                description: Swift.String? = nil,
                imageURL: Swift.String? = nil,
                startDate: Foundation.Date,
                endDate: Foundation.Date,
                accentColor: Swift.String? = nil,
                effect: Components.Schemas.SpecialOffer.effectPayload? = nil,
                region: [Swift.String]? = nil
            ) {
                self.id = id
                self.badge = badge
                self.title = title
                self.headline = headline
                self.description = description
                self.imageURL = imageURL
                self.startDate = startDate
                self.endDate = endDate
                self.accentColor = accentColor
                self.effect = effect
                self.region = region
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case badge
                case title
                case headline
                case description
                case imageURL
                case startDate
                case endDate
                case accentColor
                case effect
                case region
            }
        }
        /// - Remark: Generated from `#/components/schemas/Ads`.
        public struct Ads: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Ads/ads`.
            public var ads: [Components.Schemas.Ad]
            /// Creates a new `Ads`.
            ///
            /// - Parameters:
            ///   - ads:
            public init(ads: [Components.Schemas.Ad]) {
                self.ads = ads
            }
            public enum CodingKeys: String, CodingKey {
                case ads
            }
        }
        /// - Remark: Generated from `#/components/schemas/Ad`.
        public struct Ad: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Ad/appStoreId`.
            public var appStoreId: Swift.String
            /// - Remark: Generated from `#/components/schemas/Ad/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/Ad/description`.
            public var description: Swift.String
            /// - Remark: Generated from `#/components/schemas/Ad/iconURL`.
            public var iconURL: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Ad/priority`.
            public var priority: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Ad/address`.
            public var address: Swift.String?
            /// Creates a new `Ad`.
            ///
            /// - Parameters:
            ///   - appStoreId:
            ///   - title:
            ///   - description:
            ///   - iconURL:
            ///   - priority:
            ///   - address:
            public init(
                appStoreId: Swift.String,
                title: Swift.String,
                description: Swift.String,
                iconURL: Swift.String? = nil,
                priority: Swift.Int? = nil,
                address: Swift.String? = nil
            ) {
                self.appStoreId = appStoreId
                self.title = title
                self.description = description
                self.iconURL = iconURL
                self.priority = priority
                self.address = address
            }
            public enum CodingKeys: String, CodingKey {
                case appStoreId
                case title
                case description
                case iconURL
                case priority
                case address
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Fetch apps
    ///
    /// - Remark: HTTP `GET /config/apps-short.json`.
    /// - Remark: Generated from `#/paths//config/apps-short.json/get(fetchApps)`.
    public enum fetchApps {
        public static let id: Swift.String = "fetchApps"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/config/apps-short.json/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fetchApps.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fetchApps.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.fetchApps.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.fetchApps.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/config/apps-short.json/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/config/apps-short.json/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.AppShort])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.AppShort] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.fetchApps.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.fetchApps.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful operation
            ///
            /// - Remark: Generated from `#/paths//config/apps-short.json/get(fetchApps)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.fetchApps.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.fetchApps.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// Apps not found
            ///
            /// - Remark: Generated from `#/paths//config/apps-short.json/get(fetchApps)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.fetchApps.Output.NotFound)
            /// Apps not found
            ///
            /// - Remark: Generated from `#/paths//config/apps-short.json/get(fetchApps)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            public static var notFound: Self {
                .notFound(.init())
            }
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.fetchApps.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Fetch info
    ///
    /// - Remark: HTTP `GET /config/info.json`.
    /// - Remark: Generated from `#/paths//config/info.json/get(fetchInfo)`.
    public enum fetchInfo {
        public static let id: Swift.String = "fetchInfo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/config/info.json/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fetchInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fetchInfo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.fetchInfo.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.fetchInfo.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/config/info.json/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/config/info.json/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Info)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Info {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.fetchInfo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.fetchInfo.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful operation
            ///
            /// - Remark: Generated from `#/paths//config/info.json/get(fetchInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.fetchInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.fetchInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// Info not found
            ///
            /// - Remark: Generated from `#/paths//config/info.json/get(fetchInfo)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.fetchInfo.Output.NotFound)
            /// Info not found
            ///
            /// - Remark: Generated from `#/paths//config/info.json/get(fetchInfo)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            public static var notFound: Self {
                .notFound(.init())
            }
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.fetchInfo.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Fetch special offers events
    ///
    /// - Remark: HTTP `GET /config/special-offers.json`.
    /// - Remark: Generated from `#/paths//config/special-offers.json/get(fetchSpecialOffers)`.
    public enum fetchSpecialOffers {
        public static let id: Swift.String = "fetchSpecialOffers"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/config/special-offers.json/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fetchSpecialOffers.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fetchSpecialOffers.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.fetchSpecialOffers.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.fetchSpecialOffers.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/config/special-offers.json/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/config/special-offers.json/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.SpecialOffers)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.SpecialOffers {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.fetchSpecialOffers.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.fetchSpecialOffers.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Successful operation
            ///
            /// - Remark: Generated from `#/paths//config/special-offers.json/get(fetchSpecialOffers)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.fetchSpecialOffers.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.fetchSpecialOffers.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// Offers not found
            ///
            /// - Remark: Generated from `#/paths//config/special-offers.json/get(fetchSpecialOffers)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.fetchSpecialOffers.Output.NotFound)
            /// Offers not found
            ///
            /// - Remark: Generated from `#/paths//config/special-offers.json/get(fetchSpecialOffers)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            public static var notFound: Self {
                .notFound(.init())
            }
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.fetchSpecialOffers.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Find app by ID
    ///
    /// Returns a single app
    ///
    /// - Remark: HTTP `GET /config/apps/{appId}.json`.
    /// - Remark: Generated from `#/paths//config/apps/{appId}.json/get(fetchAppById)`.
    public enum fetchAppById {
        public static let id: Swift.String = "fetchAppById"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/config/apps/{appId}.json/GET/path`.
            public struct Path: Sendable, Hashable {
                /// ID of pet to return
                ///
                /// - Remark: Generated from `#/paths/config/apps/{appId}.json/GET/path/appId`.
                public var appId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - appId: ID of pet to return
                public init(appId: Swift.String) {
                    self.appId = appId
                }
            }
            public var path: Operations.fetchAppById.Input.Path
            /// - Remark: Generated from `#/paths/config/apps/{appId}.json/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fetchAppById.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fetchAppById.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.fetchAppById.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.fetchAppById.Input.Path,
                headers: Operations.fetchAppById.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/config/apps/{appId}.json/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/config/apps/{appId}.json/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.AppDetail)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AppDetail {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.fetchAppById.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.fetchAppById.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// successful operation
            ///
            /// - Remark: Generated from `#/paths//config/apps/{appId}.json/get(fetchAppById)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.fetchAppById.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.fetchAppById.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// App not found
            ///
            /// - Remark: Generated from `#/paths//config/apps/{appId}.json/get(fetchAppById)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.fetchAppById.Output.NotFound)
            /// App not found
            ///
            /// - Remark: Generated from `#/paths//config/apps/{appId}.json/get(fetchAppById)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            public static var notFound: Self {
                .notFound(.init())
            }
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.fetchAppById.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Fetch ads
    ///
    /// - Remark: HTTP `GET /config/ads.json`.
    /// - Remark: Generated from `#/paths//config/ads.json/get(fetchAds)`.
    public enum fetchAds {
        public static let id: Swift.String = "fetchAds"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/config/ads.json/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fetchAds.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fetchAds.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.fetchAds.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.fetchAds.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/config/ads.json/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/config/ads.json/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Ads)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Ads {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.fetchAds.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.fetchAds.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// successful operation
            ///
            /// - Remark: Generated from `#/paths//config/ads.json/get(fetchAds)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.fetchAds.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.fetchAds.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// Creates a new `NotFound`.
                public init() {}
            }
            /// Apps not found
            ///
            /// - Remark: Generated from `#/paths//config/ads.json/get(fetchAds)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.fetchAds.Output.NotFound)
            /// Apps not found
            ///
            /// - Remark: Generated from `#/paths//config/ads.json/get(fetchAds)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            public static var notFound: Self {
                .notFound(.init())
            }
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.fetchAds.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
