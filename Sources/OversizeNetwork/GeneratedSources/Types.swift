// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// List all applications
    ///
    /// Retrieves a list of all applications
    ///
    /// - Remark: HTTP `GET /v1/apps`.
    /// - Remark: Generated from `#/paths//v1/apps/get(getApps)`.
    func getApps(_ input: Operations.getApps.Input) async throws -> Operations.getApps.Output
    /// Get App Information
    ///
    /// Retrieve application
    ///
    /// - Remark: HTTP `GET /v1/apps/{id}`.
    /// - Remark: Generated from `#/paths//v1/apps/{id}/get(getApp)`.
    func getApp(_ input: Operations.getApp.Input) async throws -> Operations.getApp.Output
    /// Retrieve application features
    ///
    /// Get all features associated with a specific application
    ///
    /// - Remark: HTTP `GET /v1/apps/{id}/features`.
    /// - Remark: Generated from `#/paths//v1/apps/{id}/features/get(getAppFeatures)`.
    func getAppFeatures(_ input: Operations.getAppFeatures.Input) async throws -> Operations.getAppFeatures.Output
    /// Retrieve application features sections
    ///
    /// Get all features associated with a specific application
    ///
    /// - Remark: HTTP `GET /v1/apps/{id}/features/sections`.
    /// - Remark: Generated from `#/paths//v1/apps/{id}/features/sections/get(getAppFeaturesSections)`.
    func getAppFeaturesSections(_ input: Operations.getAppFeaturesSections.Input) async throws -> Operations.getAppFeaturesSections.Output
    /// Get all ads features associated with a specific application
    ///
    /// Retrieve application ads
    ///
    /// - Remark: HTTP `GET /v1/apps/{id}/ads`.
    /// - Remark: Generated from `#/paths//v1/apps/{id}/ads/get(getAppAds)`.
    func getAppAds(_ input: Operations.getAppAds.Input) async throws -> Operations.getAppAds.Output
    /// Get ad associated with a specific application
    ///
    /// Retrieve application ad
    ///
    /// - Remark: HTTP `GET /v1/apps/{id}/ad`.
    /// - Remark: Generated from `#/paths//v1/apps/{id}/ad/get(getAppAd)`.
    func getAppAd(_ input: Operations.getAppAd.Input) async throws -> Operations.getAppAd.Output
    /// Get all In-AppPurchases associated with a specific application
    ///
    /// Retrieve application In-AppPurchases products
    ///
    /// - Remark: HTTP `GET /v1/apps/{id}/in-app-purchases`.
    /// - Remark: Generated from `#/paths//v1/apps/{id}/in-app-purchases/get(getInAppPurchases)`.
    func getInAppPurchases(_ input: Operations.getInAppPurchases.Input) async throws -> Operations.getInAppPurchases.Output
    /// Get features
    ///
    /// Retrieve features
    ///
    /// - Remark: HTTP `GET /v1/features/{id}`.
    /// - Remark: Generated from `#/paths//v1/features/{id}/get(getFeature)`.
    func getFeature(_ input: Operations.getFeature.Input) async throws -> Operations.getFeature.Output
    /// Get all sale offers
    ///
    /// Retrieve StoreKit offers
    ///
    /// - Remark: HTTP `GET /v1/in-app-purchases/offers`.
    /// - Remark: Generated from `#/paths//v1/in-app-purchases/offers/get(getInAppPurchaseOffers)`.
    func getInAppPurchaseOffers(_ input: Operations.getInAppPurchaseOffers.Input) async throws -> Operations.getInAppPurchaseOffers.Output
    /// Fetch info
    ///
    /// - Remark: HTTP `GET /v1/infos`.
    /// - Remark: Generated from `#/paths//v1/infos/get(getInfo)`.
    func getInfo(_ input: Operations.getInfo.Input) async throws -> Operations.getInfo.Output
    /// Health Check
    ///
    /// Endpoint to check the health of the service
    ///
    /// - Remark: HTTP `GET /v1/health-check`.
    /// - Remark: Generated from `#/paths//v1/health-check/get(getHealthCheck)`.
    func getHealthCheck(_ input: Operations.getHealthCheck.Input) async throws -> Operations.getHealthCheck.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// List all applications
    ///
    /// Retrieves a list of all applications
    ///
    /// - Remark: HTTP `GET /v1/apps`.
    /// - Remark: Generated from `#/paths//v1/apps/get(getApps)`.
    public func getApps(
        query: Operations.getApps.Input.Query = .init(),
        headers: Operations.getApps.Input.Headers = .init()
    ) async throws -> Operations.getApps.Output {
        try await getApps(Operations.getApps.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get App Information
    ///
    /// Retrieve application
    ///
    /// - Remark: HTTP `GET /v1/apps/{id}`.
    /// - Remark: Generated from `#/paths//v1/apps/{id}/get(getApp)`.
    public func getApp(
        path: Operations.getApp.Input.Path,
        headers: Operations.getApp.Input.Headers = .init()
    ) async throws -> Operations.getApp.Output {
        try await getApp(Operations.getApp.Input(
            path: path,
            headers: headers
        ))
    }
    /// Retrieve application features
    ///
    /// Get all features associated with a specific application
    ///
    /// - Remark: HTTP `GET /v1/apps/{id}/features`.
    /// - Remark: Generated from `#/paths//v1/apps/{id}/features/get(getAppFeatures)`.
    public func getAppFeatures(
        path: Operations.getAppFeatures.Input.Path,
        query: Operations.getAppFeatures.Input.Query = .init(),
        headers: Operations.getAppFeatures.Input.Headers = .init()
    ) async throws -> Operations.getAppFeatures.Output {
        try await getAppFeatures(Operations.getAppFeatures.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Retrieve application features sections
    ///
    /// Get all features associated with a specific application
    ///
    /// - Remark: HTTP `GET /v1/apps/{id}/features/sections`.
    /// - Remark: Generated from `#/paths//v1/apps/{id}/features/sections/get(getAppFeaturesSections)`.
    public func getAppFeaturesSections(
        path: Operations.getAppFeaturesSections.Input.Path,
        query: Operations.getAppFeaturesSections.Input.Query = .init(),
        headers: Operations.getAppFeaturesSections.Input.Headers = .init()
    ) async throws -> Operations.getAppFeaturesSections.Output {
        try await getAppFeaturesSections(Operations.getAppFeaturesSections.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get all ads features associated with a specific application
    ///
    /// Retrieve application ads
    ///
    /// - Remark: HTTP `GET /v1/apps/{id}/ads`.
    /// - Remark: Generated from `#/paths//v1/apps/{id}/ads/get(getAppAds)`.
    public func getAppAds(
        path: Operations.getAppAds.Input.Path,
        query: Operations.getAppAds.Input.Query = .init(),
        headers: Operations.getAppAds.Input.Headers = .init()
    ) async throws -> Operations.getAppAds.Output {
        try await getAppAds(Operations.getAppAds.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get ad associated with a specific application
    ///
    /// Retrieve application ad
    ///
    /// - Remark: HTTP `GET /v1/apps/{id}/ad`.
    /// - Remark: Generated from `#/paths//v1/apps/{id}/ad/get(getAppAd)`.
    public func getAppAd(
        path: Operations.getAppAd.Input.Path,
        query: Operations.getAppAd.Input.Query = .init(),
        headers: Operations.getAppAd.Input.Headers = .init()
    ) async throws -> Operations.getAppAd.Output {
        try await getAppAd(Operations.getAppAd.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// Get all In-AppPurchases associated with a specific application
    ///
    /// Retrieve application In-AppPurchases products
    ///
    /// - Remark: HTTP `GET /v1/apps/{id}/in-app-purchases`.
    /// - Remark: Generated from `#/paths//v1/apps/{id}/in-app-purchases/get(getInAppPurchases)`.
    public func getInAppPurchases(
        path: Operations.getInAppPurchases.Input.Path,
        headers: Operations.getInAppPurchases.Input.Headers = .init()
    ) async throws -> Operations.getInAppPurchases.Output {
        try await getInAppPurchases(Operations.getInAppPurchases.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get features
    ///
    /// Retrieve features
    ///
    /// - Remark: HTTP `GET /v1/features/{id}`.
    /// - Remark: Generated from `#/paths//v1/features/{id}/get(getFeature)`.
    public func getFeature(
        path: Operations.getFeature.Input.Path,
        headers: Operations.getFeature.Input.Headers = .init()
    ) async throws -> Operations.getFeature.Output {
        try await getFeature(Operations.getFeature.Input(
            path: path,
            headers: headers
        ))
    }
    /// Get all sale offers
    ///
    /// Retrieve StoreKit offers
    ///
    /// - Remark: HTTP `GET /v1/in-app-purchases/offers`.
    /// - Remark: Generated from `#/paths//v1/in-app-purchases/offers/get(getInAppPurchaseOffers)`.
    public func getInAppPurchaseOffers(headers: Operations.getInAppPurchaseOffers.Input.Headers = .init()) async throws -> Operations.getInAppPurchaseOffers.Output {
        try await getInAppPurchaseOffers(Operations.getInAppPurchaseOffers.Input(headers: headers))
    }
    /// Fetch info
    ///
    /// - Remark: HTTP `GET /v1/infos`.
    /// - Remark: Generated from `#/paths//v1/infos/get(getInfo)`.
    public func getInfo(headers: Operations.getInfo.Input.Headers = .init()) async throws -> Operations.getInfo.Output {
        try await getInfo(Operations.getInfo.Input(headers: headers))
    }
    /// Health Check
    ///
    /// Endpoint to check the health of the service
    ///
    /// - Remark: HTTP `GET /v1/health-check`.
    /// - Remark: Generated from `#/paths//v1/health-check/get(getHealthCheck)`.
    public func getHealthCheck(headers: Operations.getHealthCheck.Input.Headers = .init()) async throws -> Operations.getHealthCheck.Output {
        try await getHealthCheck(Operations.getHealthCheck.Input(headers: headers))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    /// Production API
    public enum Server1 {
        /// Production API
        public static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://api.oversize.app",
                variables: []
            )
        }
    }
    /// Production API
    @available(*, deprecated, renamed: "Servers.Server1.url")
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.oversize.app",
            variables: []
        )
    }
    /// Test API
    public enum Server2 {
        /// Test API
        public static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://test.api.oversize.app",
                variables: []
            )
        }
    }
    /// Test API
    @available(*, deprecated, renamed: "Servers.Server2.url")
    public static func server2() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://test.api.oversize.app",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// - Remark: Generated from `#/components/schemas/PlatformType`.
        @frozen public enum PlatformType: String, Codable, Hashable, Sendable, CaseIterable {
            case iOS = "iOS"
            case macOS = "macOS"
            case tvOS = "tvOS"
            case watchOS = "watchOS"
            case visionOS = "visionOS"
        }
        /// - Remark: Generated from `#/components/schemas/App`.
        public struct App: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/App/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/App/iconUrl`.
            public var iconUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/App/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/App/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/App/subtitle`.
            public var subtitle: Swift.String
            /// - Remark: Generated from `#/components/schemas/App/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/App/address`.
            public var address: Swift.String
            /// - Remark: Generated from `#/components/schemas/App/termsDate`.
            public var termsDate: Swift.String
            /// - Remark: Generated from `#/components/schemas/App/termsAdditions`.
            public var termsAdditions: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/App/platforms`.
            public var platforms: [Components.Schemas.PlatformType]?
            /// - Remark: Generated from `#/components/schemas/App/createdAt`.
            public var createdAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/App/updatedAt`.
            public var updatedAt: Foundation.Date?
            /// Creates a new `App`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - iconUrl:
            ///   - name:
            ///   - title:
            ///   - subtitle:
            ///   - description:
            ///   - address:
            ///   - termsDate:
            ///   - termsAdditions:
            ///   - platforms:
            ///   - createdAt:
            ///   - updatedAt:
            public init(
                id: Swift.String,
                iconUrl: Swift.String? = nil,
                name: Swift.String,
                title: Swift.String,
                subtitle: Swift.String,
                description: Swift.String? = nil,
                address: Swift.String,
                termsDate: Swift.String,
                termsAdditions: [Swift.String]? = nil,
                platforms: [Components.Schemas.PlatformType]? = nil,
                createdAt: Foundation.Date? = nil,
                updatedAt: Foundation.Date? = nil
            ) {
                self.id = id
                self.iconUrl = iconUrl
                self.name = name
                self.title = title
                self.subtitle = subtitle
                self.description = description
                self.address = address
                self.termsDate = termsDate
                self.termsAdditions = termsAdditions
                self.platforms = platforms
                self.createdAt = createdAt
                self.updatedAt = updatedAt
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case iconUrl
                case name
                case title
                case subtitle
                case description
                case address
                case termsDate
                case termsAdditions
                case platforms
                case createdAt
                case updatedAt
            }
        }
        /// - Remark: Generated from `#/components/schemas/Error`.
        public struct _Error: Codable, Hashable, Sendable {
            /// Error type identifier
            ///
            /// - Remark: Generated from `#/components/schemas/Error/error`.
            public var error: Swift.String
            /// Specific error code
            ///
            /// - Remark: Generated from `#/components/schemas/Error/code`.
            public var code: Swift.String
            /// Human-readable error message
            ///
            /// - Remark: Generated from `#/components/schemas/Error/message`.
            public var message: Swift.String
            /// Creates a new `_Error`.
            ///
            /// - Parameters:
            ///   - error: Error type identifier
            ///   - code: Specific error code
            ///   - message: Human-readable error message
            public init(
                error: Swift.String,
                code: Swift.String,
                message: Swift.String
            ) {
                self.error = error
                self.code = code
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case error
                case code
                case message
            }
        }
        /// - Remark: Generated from `#/components/schemas/Screenshot`.
        public struct Screenshot: Codable, Hashable, Sendable {
            /// URL for the features screenshot
            ///
            /// - Remark: Generated from `#/components/schemas/Screenshot/url`.
            public var url: Swift.String
            /// Vertical alignment of the screenshot
            ///
            /// - Remark: Generated from `#/components/schemas/Screenshot/alignment`.
            @frozen public enum alignmentPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case top = "top"
                case center = "center"
                case bottom = "bottom"
            }
            /// Vertical alignment of the screenshot
            ///
            /// - Remark: Generated from `#/components/schemas/Screenshot/alignment`.
            public var alignment: Components.Schemas.Screenshot.alignmentPayload
            /// Background color value in hex format without
            ///
            /// - Remark: Generated from `#/components/schemas/Screenshot/backgroundColor`.
            public var backgroundColor: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Screenshot/platform`.
            public var platform: Components.Schemas.PlatformType
            /// Creates a new `Screenshot`.
            ///
            /// - Parameters:
            ///   - url: URL for the features screenshot
            ///   - alignment: Vertical alignment of the screenshot
            ///   - backgroundColor: Background color value in hex format without
            ///   - platform:
            public init(
                url: Swift.String,
                alignment: Components.Schemas.Screenshot.alignmentPayload,
                backgroundColor: Swift.String? = nil,
                platform: Components.Schemas.PlatformType
            ) {
                self.url = url
                self.alignment = alignment
                self.backgroundColor = backgroundColor
                self.platform = platform
            }
            public enum CodingKeys: String, CodingKey {
                case url
                case alignment
                case backgroundColor
                case platform
            }
        }
        /// - Remark: Generated from `#/components/schemas/Feature`.
        public struct Feature: Codable, Hashable, Sendable {
            /// Computed identifier from image, title, and subtitle
            ///
            /// - Remark: Generated from `#/components/schemas/Feature/id`.
            public var id: Swift.String
            /// Title of the store features
            ///
            /// - Remark: Generated from `#/components/schemas/Feature/title`.
            public var title: Swift.String
            /// Subtitle of the store features
            ///
            /// - Remark: Generated from `#/components/schemas/Feature/subtitle`.
            public var subtitle: Swift.String?
            /// Description of the store features
            ///
            /// - Remark: Generated from `#/components/schemas/Feature/description`.
            public var description: Swift.String?
            /// Size of the text content
            ///
            /// - Remark: Generated from `#/components/schemas/Feature/textSize`.
            @frozen public enum textSizePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case small = "small"
                case medium = "medium"
                case large = "large"
            }
            /// Size of the text content
            ///
            /// - Remark: Generated from `#/components/schemas/Feature/textSize`.
            public var textSize: Components.Schemas.Feature.textSizePayload
            /// Alignment of the text content
            ///
            /// - Remark: Generated from `#/components/schemas/Feature/textAlignment`.
            @frozen public enum textAlignmentPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case leading = "leading"
                case center = "center"
                case trailing = "trailing"
            }
            /// Alignment of the text content
            ///
            /// - Remark: Generated from `#/components/schemas/Feature/textAlignment`.
            public var textAlignment: Components.Schemas.Feature.textAlignmentPayload
            /// URL for the features icon
            ///
            /// - Remark: Generated from `#/components/schemas/Feature/iconUrl`.
            public var iconUrl: Swift.String?
            /// URL for the features icon
            ///
            /// - Remark: Generated from `#/components/schemas/Feature/illustrationUrl`.
            public var illustrationUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Feature/screenshots`.
            public var screenshots: [Components.Schemas.Screenshot]
            /// Creates a new `Feature`.
            ///
            /// - Parameters:
            ///   - id: Computed identifier from image, title, and subtitle
            ///   - title: Title of the store features
            ///   - subtitle: Subtitle of the store features
            ///   - description: Description of the store features
            ///   - textSize: Size of the text content
            ///   - textAlignment: Alignment of the text content
            ///   - iconUrl: URL for the features icon
            ///   - illustrationUrl: URL for the features icon
            ///   - screenshots:
            public init(
                id: Swift.String,
                title: Swift.String,
                subtitle: Swift.String? = nil,
                description: Swift.String? = nil,
                textSize: Components.Schemas.Feature.textSizePayload,
                textAlignment: Components.Schemas.Feature.textAlignmentPayload,
                iconUrl: Swift.String? = nil,
                illustrationUrl: Swift.String? = nil,
                screenshots: [Components.Schemas.Screenshot]
            ) {
                self.id = id
                self.title = title
                self.subtitle = subtitle
                self.description = description
                self.textSize = textSize
                self.textAlignment = textAlignment
                self.iconUrl = iconUrl
                self.illustrationUrl = illustrationUrl
                self.screenshots = screenshots
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case title
                case subtitle
                case description
                case textSize
                case textAlignment
                case iconUrl
                case illustrationUrl
                case screenshots
            }
        }
        /// - Remark: Generated from `#/components/schemas/MainSection`.
        public struct MainSection: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MainSection/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/MainSection/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case _default = "default"
            }
            /// - Remark: Generated from `#/components/schemas/MainSection/type`.
            public var _type: Components.Schemas.MainSection._typePayload
            /// - Remark: Generated from `#/components/schemas/MainSection/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/MainSection/subtitle`.
            public var subtitle: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MainSection/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MainSection/color`.
            public var color: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MainSection/columns`.
            public var columns: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/MainSection/screenshots`.
            public var screenshots: [Components.Schemas.Screenshot]?
            /// - Remark: Generated from `#/components/schemas/MainSection/features`.
            public var features: [Components.Schemas.Feature]
            /// Creates a new `MainSection`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - _type:
            ///   - title:
            ///   - subtitle:
            ///   - description:
            ///   - color:
            ///   - columns:
            ///   - screenshots:
            ///   - features:
            public init(
                id: Swift.String,
                _type: Components.Schemas.MainSection._typePayload,
                title: Swift.String,
                subtitle: Swift.String? = nil,
                description: Swift.String? = nil,
                color: Swift.String? = nil,
                columns: Swift.Int? = nil,
                screenshots: [Components.Schemas.Screenshot]? = nil,
                features: [Components.Schemas.Feature]
            ) {
                self.id = id
                self._type = _type
                self.title = title
                self.subtitle = subtitle
                self.description = description
                self.color = color
                self.columns = columns
                self.screenshots = screenshots
                self.features = features
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case _type = "type"
                case title
                case subtitle
                case description
                case color
                case columns
                case screenshots
                case features
            }
        }
        /// - Remark: Generated from `#/components/schemas/Section`.
        public struct Section: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Section/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/Section/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case grid = "grid"
                case list = "list"
            }
            /// - Remark: Generated from `#/components/schemas/Section/type`.
            public var _type: Components.Schemas.Section._typePayload
            /// - Remark: Generated from `#/components/schemas/Section/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/Section/subtitle`.
            public var subtitle: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Section/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Section/color`.
            public var color: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Section/columns`.
            public var columns: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Section/screenshots`.
            public var screenshots: [Components.Schemas.Screenshot]?
            /// - Remark: Generated from `#/components/schemas/Section/features`.
            public var features: [Components.Schemas.Feature]
            /// Creates a new `Section`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - _type:
            ///   - title:
            ///   - subtitle:
            ///   - description:
            ///   - color:
            ///   - columns:
            ///   - screenshots:
            ///   - features:
            public init(
                id: Swift.String,
                _type: Components.Schemas.Section._typePayload,
                title: Swift.String,
                subtitle: Swift.String? = nil,
                description: Swift.String? = nil,
                color: Swift.String? = nil,
                columns: Swift.Int? = nil,
                screenshots: [Components.Schemas.Screenshot]? = nil,
                features: [Components.Schemas.Feature]
            ) {
                self.id = id
                self._type = _type
                self.title = title
                self.subtitle = subtitle
                self.description = description
                self.color = color
                self.columns = columns
                self.screenshots = screenshots
                self.features = features
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case _type = "type"
                case title
                case subtitle
                case description
                case color
                case columns
                case screenshots
                case features
            }
        }
        /// - Remark: Generated from `#/components/schemas/Ad`.
        public struct Ad: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Ad/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Ad/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/Ad/description`.
            public var description: Swift.String
            /// - Remark: Generated from `#/components/schemas/Ad/iconURL`.
            public var iconURL: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Ad/priority`.
            public var priority: Swift.Int?
            /// Creates a new `Ad`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - title:
            ///   - description:
            ///   - iconURL:
            ///   - priority:
            public init(
                id: Swift.Int,
                title: Swift.String,
                description: Swift.String,
                iconURL: Swift.String? = nil,
                priority: Swift.Int? = nil
            ) {
                self.id = id
                self.title = title
                self.description = description
                self.iconURL = iconURL
                self.priority = priority
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case title
                case description
                case iconURL
                case priority
            }
        }
        /// - Remark: Generated from `#/components/schemas/InAppPurchaseBanner`.
        public struct InAppPurchaseBanner: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InAppPurchaseBanner/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/InAppPurchaseBanner/badge`.
            public var badge: Swift.String
            /// - Remark: Generated from `#/components/schemas/InAppPurchaseBanner/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/InAppPurchaseBanner/description`.
            public var description: Swift.String?
            /// Creates a new `InAppPurchaseBanner`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - badge:
            ///   - title:
            ///   - description:
            public init(
                id: Swift.Int,
                badge: Swift.String,
                title: Swift.String,
                description: Swift.String? = nil
            ) {
                self.id = id
                self.badge = badge
                self.title = title
                self.description = description
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case badge
                case title
                case description
            }
        }
        /// - Remark: Generated from `#/components/schemas/InAppPurchaseOffer`.
        public struct InAppPurchaseOffer: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InAppPurchaseOffer/id`.
            public var id: Swift.Int
            /// - Remark: Generated from `#/components/schemas/InAppPurchaseOffer/badge`.
            public var badge: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InAppPurchaseOffer/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/InAppPurchaseOffer/headline`.
            public var headline: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InAppPurchaseOffer/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InAppPurchaseOffer/imageURL`.
            public var imageURL: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InAppPurchaseOffer/startDate`.
            public var startDate: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/InAppPurchaseOffer/endDate`.
            public var endDate: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/InAppPurchaseOffer/accentColor`.
            public var accentColor: Swift.String?
            /// - Remark: Generated from `#/components/schemas/InAppPurchaseOffer/effect`.
            @frozen public enum effectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case snow = "snow"
            }
            /// - Remark: Generated from `#/components/schemas/InAppPurchaseOffer/effect`.
            public var effect: Components.Schemas.InAppPurchaseOffer.effectPayload?
            /// - Remark: Generated from `#/components/schemas/InAppPurchaseOffer/region`.
            public var region: [Swift.String]?
            /// Creates a new `InAppPurchaseOffer`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - badge:
            ///   - title:
            ///   - headline:
            ///   - description:
            ///   - imageURL:
            ///   - startDate:
            ///   - endDate:
            ///   - accentColor:
            ///   - effect:
            ///   - region:
            public init(
                id: Swift.Int,
                badge: Swift.String? = nil,
                title: Swift.String,
                headline: Swift.String? = nil,
                description: Swift.String? = nil,
                imageURL: Swift.String? = nil,
                startDate: Foundation.Date,
                endDate: Foundation.Date,
                accentColor: Swift.String? = nil,
                effect: Components.Schemas.InAppPurchaseOffer.effectPayload? = nil,
                region: [Swift.String]? = nil
            ) {
                self.id = id
                self.badge = badge
                self.title = title
                self.headline = headline
                self.description = description
                self.imageURL = imageURL
                self.startDate = startDate
                self.endDate = endDate
                self.accentColor = accentColor
                self.effect = effect
                self.region = region
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case badge
                case title
                case headline
                case description
                case imageURL
                case startDate
                case endDate
                case accentColor
                case effect
                case region
            }
        }
        /// - Remark: Generated from `#/components/schemas/SocialNetwork`.
        public struct SocialNetwork: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SocialNetwork/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/SocialNetwork/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/SocialNetwork/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/SocialNetwork/iconUrl`.
            public var iconUrl: Swift.String
            /// Creates a new `SocialNetwork`.
            ///
            /// - Parameters:
            ///   - title:
            ///   - id:
            ///   - url:
            ///   - iconUrl:
            public init(
                title: Swift.String,
                id: Swift.String,
                url: Swift.String,
                iconUrl: Swift.String
            ) {
                self.title = title
                self.id = id
                self.url = url
                self.iconUrl = iconUrl
            }
            public enum CodingKeys: String, CodingKey {
                case title
                case id
                case url
                case iconUrl
            }
        }
        /// - Remark: Generated from `#/components/schemas/Developer`.
        public struct Developer: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Developer/email`.
            public var email: Swift.String
            /// - Remark: Generated from `#/components/schemas/Developer/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/Developer/socialNetworks`.
            public var socialNetworks: [Components.Schemas.SocialNetwork]
            /// - Remark: Generated from `#/components/schemas/Developer/url`.
            public var url: Swift.String
            /// Creates a new `Developer`.
            ///
            /// - Parameters:
            ///   - email:
            ///   - name:
            ///   - socialNetworks:
            ///   - url:
            public init(
                email: Swift.String,
                name: Swift.String,
                socialNetworks: [Components.Schemas.SocialNetwork],
                url: Swift.String
            ) {
                self.email = email
                self.name = name
                self.socialNetworks = socialNetworks
                self.url = url
            }
            public enum CodingKeys: String, CodingKey {
                case email
                case name
                case socialNetworks
                case url
            }
        }
        /// - Remark: Generated from `#/components/schemas/Company`.
        public struct Company: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Company/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/Company/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/Company/email`.
            public var email: Swift.String
            /// - Remark: Generated from `#/components/schemas/Company/supportEmail`.
            public var supportEmail: Swift.String
            /// - Remark: Generated from `#/components/schemas/Company/appStoreId`.
            public var appStoreId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Company/socialNetworks`.
            public var socialNetworks: [Components.Schemas.SocialNetwork]
            /// Creates a new `Company`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - url:
            ///   - email:
            ///   - supportEmail:
            ///   - appStoreId:
            ///   - socialNetworks:
            public init(
                name: Swift.String,
                url: Swift.String,
                email: Swift.String,
                supportEmail: Swift.String,
                appStoreId: Swift.String? = nil,
                socialNetworks: [Components.Schemas.SocialNetwork]
            ) {
                self.name = name
                self.url = url
                self.email = email
                self.supportEmail = supportEmail
                self.appStoreId = appStoreId
                self.socialNetworks = socialNetworks
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case url
                case email
                case supportEmail
                case appStoreId
                case socialNetworks
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// Client application version
        ///
        /// - Remark: Generated from `#/components/parameters/AppVersion`.
        public typealias AppVersion = Swift.String
        /// Filter by platforms
        ///
        /// - Remark: Generated from `#/components/parameters/Platforms`.
        public typealias Platforms = [Components.Schemas.PlatformType]
        /// Application ID
        ///
        /// - Remark: Generated from `#/components/parameters/AppId`.
        public typealias AppId = Swift.String
        /// Feature ID
        ///
        /// - Remark: Generated from `#/components/parameters/FeatureId`.
        public typealias FeatureId = Swift.String
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {
        public struct AppsResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/AppsResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// List of applications
                ///
                /// - Remark: Generated from `#/components/responses/AppsResponse/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Collection of applications
                    ///
                    /// - Remark: Generated from `#/components/responses/AppsResponse/content/json/apps`.
                    public var apps: [Components.Schemas.App]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - apps: Collection of applications
                    public init(apps: [Components.Schemas.App]) {
                        self.apps = apps
                    }
                    public enum CodingKeys: String, CodingKey {
                        case apps
                    }
                }
                /// - Remark: Generated from `#/components/responses/AppsResponse/content/application\/json`.
                case json(Components.Responses.AppsResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.AppsResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.AppsResponse.Body
            /// Creates a new `AppsResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.AppsResponse.Body) {
                self.body = body
            }
        }
        public struct BadRequestResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/BadRequestResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/BadRequestResponse/content/application\/json`.
                case json(Components.Schemas._Error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas._Error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.BadRequestResponse.Body
            /// Creates a new `BadRequestResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.BadRequestResponse.Body) {
                self.body = body
            }
        }
        public struct InternalServerErrorResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/InternalServerErrorResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/InternalServerErrorResponse/content/application\/json`.
                case json(Components.Schemas._Error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas._Error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.InternalServerErrorResponse.Body
            /// Creates a new `InternalServerErrorResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.InternalServerErrorResponse.Body) {
                self.body = body
            }
        }
        public struct AppResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/AppResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// Application
                ///
                /// - Remark: Generated from `#/components/responses/AppResponse/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Single application details
                    ///
                    /// - Remark: Generated from `#/components/responses/AppResponse/content/json/app`.
                    public var app: Components.Schemas.App
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - app: Single application details
                    public init(app: Components.Schemas.App) {
                        self.app = app
                    }
                    public enum CodingKeys: String, CodingKey {
                        case app
                    }
                }
                /// - Remark: Generated from `#/components/responses/AppResponse/content/application\/json`.
                case json(Components.Responses.AppResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.AppResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.AppResponse.Body
            /// Creates a new `AppResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.AppResponse.Body) {
                self.body = body
            }
        }
        public struct NotFoundResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/NotFoundResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/NotFoundResponse/content/application\/json`.
                case json(Components.Schemas._Error)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Schemas._Error {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.NotFoundResponse.Body
            /// Creates a new `NotFoundResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.NotFoundResponse.Body) {
                self.body = body
            }
        }
        public struct FeaturesResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/FeaturesResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// List of features
                ///
                /// - Remark: Generated from `#/components/responses/FeaturesResponse/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Collection of sections
                    ///
                    /// - Remark: Generated from `#/components/responses/FeaturesResponse/content/json/features`.
                    public var features: [Components.Schemas.Feature]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - features: Collection of sections
                    public init(features: [Components.Schemas.Feature]) {
                        self.features = features
                    }
                    public enum CodingKeys: String, CodingKey {
                        case features
                    }
                }
                /// - Remark: Generated from `#/components/responses/FeaturesResponse/content/application\/json`.
                case json(Components.Responses.FeaturesResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.FeaturesResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.FeaturesResponse.Body
            /// Creates a new `FeaturesResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.FeaturesResponse.Body) {
                self.body = body
            }
        }
        public struct SectionsResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/SectionsResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// List of feature sections
                ///
                /// - Remark: Generated from `#/components/responses/SectionsResponse/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// General section
                    ///
                    /// - Remark: Generated from `#/components/responses/SectionsResponse/content/json/mainSection`.
                    public var mainSection: Components.Schemas.MainSection
                    /// Collection of sections
                    ///
                    /// - Remark: Generated from `#/components/responses/SectionsResponse/content/json/sections`.
                    public var sections: [Components.Schemas.Section]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - mainSection: General section
                    ///   - sections: Collection of sections
                    public init(
                        mainSection: Components.Schemas.MainSection,
                        sections: [Components.Schemas.Section]
                    ) {
                        self.mainSection = mainSection
                        self.sections = sections
                    }
                    public enum CodingKeys: String, CodingKey {
                        case mainSection
                        case sections
                    }
                }
                /// - Remark: Generated from `#/components/responses/SectionsResponse/content/application\/json`.
                case json(Components.Responses.SectionsResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.SectionsResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.SectionsResponse.Body
            /// Creates a new `SectionsResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.SectionsResponse.Body) {
                self.body = body
            }
        }
        public struct AdsResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/AdsResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// List of app ads
                ///
                /// - Remark: Generated from `#/components/responses/AdsResponse/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Collection of ads
                    ///
                    /// - Remark: Generated from `#/components/responses/AdsResponse/content/json/ads`.
                    public var ads: [Components.Schemas.Ad]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - ads: Collection of ads
                    public init(ads: [Components.Schemas.Ad]) {
                        self.ads = ads
                    }
                    public enum CodingKeys: String, CodingKey {
                        case ads
                    }
                }
                /// - Remark: Generated from `#/components/responses/AdsResponse/content/application\/json`.
                case json(Components.Responses.AdsResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.AdsResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.AdsResponse.Body
            /// Creates a new `AdsResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.AdsResponse.Body) {
                self.body = body
            }
        }
        public struct AdResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/AdResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// Ad
                ///
                /// - Remark: Generated from `#/components/responses/AdResponse/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// App Ad
                    ///
                    /// - Remark: Generated from `#/components/responses/AdResponse/content/json/ad`.
                    public var ad: Components.Schemas.Ad
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - ad: App Ad
                    public init(ad: Components.Schemas.Ad) {
                        self.ad = ad
                    }
                    public enum CodingKeys: String, CodingKey {
                        case ad
                    }
                }
                /// - Remark: Generated from `#/components/responses/AdResponse/content/application\/json`.
                case json(Components.Responses.AdResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.AdResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.AdResponse.Body
            /// Creates a new `AdResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.AdResponse.Body) {
                self.body = body
            }
        }
        public struct InAppPurchaseResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/InAppPurchaseResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/InAppPurchaseResponse/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/InAppPurchaseResponse/content/json/productIds`.
                    public var productIds: [Swift.String]
                    /// - Remark: Generated from `#/components/responses/InAppPurchaseResponse/content/json/banner`.
                    public var banner: Components.Schemas.InAppPurchaseBanner
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - productIds:
                    ///   - banner:
                    public init(
                        productIds: [Swift.String],
                        banner: Components.Schemas.InAppPurchaseBanner
                    ) {
                        self.productIds = productIds
                        self.banner = banner
                    }
                    public enum CodingKeys: String, CodingKey {
                        case productIds
                        case banner
                    }
                }
                /// - Remark: Generated from `#/components/responses/InAppPurchaseResponse/content/application\/json`.
                case json(Components.Responses.InAppPurchaseResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.InAppPurchaseResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.InAppPurchaseResponse.Body
            /// Creates a new `InAppPurchaseResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.InAppPurchaseResponse.Body) {
                self.body = body
            }
        }
        public struct FeatureResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/FeatureResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// Feature
                ///
                /// - Remark: Generated from `#/components/responses/FeatureResponse/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Single feature details
                    ///
                    /// - Remark: Generated from `#/components/responses/FeatureResponse/content/json/feature`.
                    public var feature: Components.Schemas.Feature
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - feature: Single feature details
                    public init(feature: Components.Schemas.Feature) {
                        self.feature = feature
                    }
                    public enum CodingKeys: String, CodingKey {
                        case feature
                    }
                }
                /// - Remark: Generated from `#/components/responses/FeatureResponse/content/application\/json`.
                case json(Components.Responses.FeatureResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.FeatureResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.FeatureResponse.Body
            /// Creates a new `FeatureResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.FeatureResponse.Body) {
                self.body = body
            }
        }
        public struct InAppPurchaseOffersResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/InAppPurchaseOffersResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// List of offers
                ///
                /// - Remark: Generated from `#/components/responses/InAppPurchaseOffersResponse/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// Collection of sections
                    ///
                    /// - Remark: Generated from `#/components/responses/InAppPurchaseOffersResponse/content/json/offers`.
                    public var offers: [Components.Schemas.InAppPurchaseOffer]
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - offers: Collection of sections
                    public init(offers: [Components.Schemas.InAppPurchaseOffer]) {
                        self.offers = offers
                    }
                    public enum CodingKeys: String, CodingKey {
                        case offers
                    }
                }
                /// - Remark: Generated from `#/components/responses/InAppPurchaseOffersResponse/content/application\/json`.
                case json(Components.Responses.InAppPurchaseOffersResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.InAppPurchaseOffersResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.InAppPurchaseOffersResponse.Body
            /// Creates a new `InAppPurchaseOffersResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.InAppPurchaseOffersResponse.Body) {
                self.body = body
            }
        }
        public struct InfoResponse: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/InfoResponse/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// Info
                ///
                /// - Remark: Generated from `#/components/responses/InfoResponse/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/InfoResponse/content/json/developer`.
                    public var developer: Components.Schemas.Developer
                    /// - Remark: Generated from `#/components/responses/InfoResponse/content/json/company`.
                    public var company: Components.Schemas.Company
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - developer:
                    ///   - company:
                    public init(
                        developer: Components.Schemas.Developer,
                        company: Components.Schemas.Company
                    ) {
                        self.developer = developer
                        self.company = company
                    }
                    public enum CodingKeys: String, CodingKey {
                        case developer
                        case company
                    }
                }
                /// - Remark: Generated from `#/components/responses/InfoResponse/content/application\/json`.
                case json(Components.Responses.InfoResponse.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses.InfoResponse.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body):
                            return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses.InfoResponse.Body
            /// Creates a new `InfoResponse`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses.InfoResponse.Body) {
                self.body = body
            }
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// List all applications
    ///
    /// Retrieves a list of all applications
    ///
    /// - Remark: HTTP `GET /v1/apps`.
    /// - Remark: Generated from `#/paths//v1/apps/get(getApps)`.
    public enum getApps {
        public static let id: Swift.String = "getApps"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/apps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Filter by platforms
                ///
                /// - Remark: Generated from `#/paths/v1/apps/GET/query/platforms`.
                public var platforms: Components.Parameters.Platforms?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - platforms: Filter by platforms
                public init(platforms: Components.Parameters.Platforms? = nil) {
                    self.platforms = platforms
                }
            }
            public var query: Operations.getApps.Input.Query
            /// - Remark: Generated from `#/paths/v1/apps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getApps.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getApps.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getApps.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getApps.Input.Query = .init(),
                headers: Operations.getApps.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// List of applications
            ///
            /// - Remark: Generated from `#/paths//v1/apps/get(getApps)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.AppsResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.AppsResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//v1/apps/get(getApps)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestResponse)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestResponse {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//v1/apps/get(getApps)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponse)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponse {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get App Information
    ///
    /// Retrieve application
    ///
    /// - Remark: HTTP `GET /v1/apps/{id}`.
    /// - Remark: Generated from `#/paths//v1/apps/{id}/get(getApp)`.
    public enum getApp {
        public static let id: Swift.String = "getApp"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/apps/{id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// Application ID
                ///
                /// - Remark: Generated from `#/paths/v1/apps/{id}/GET/path/id`.
                public var id: Components.Parameters.AppId
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: Application ID
                public init(id: Components.Parameters.AppId) {
                    self.id = id
                }
            }
            public var path: Operations.getApp.Input.Path
            /// - Remark: Generated from `#/paths/v1/apps/{id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getApp.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getApp.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getApp.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getApp.Input.Path,
                headers: Operations.getApp.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Application
            ///
            /// - Remark: Generated from `#/paths//v1/apps/{id}/get(getApp)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.AppResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.AppResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//v1/apps/{id}/get(getApp)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestResponse)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestResponse {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Not found
            ///
            /// - Remark: Generated from `#/paths//v1/apps/{id}/get(getApp)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFoundResponse)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFoundResponse {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//v1/apps/{id}/get(getApp)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponse)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponse {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieve application features
    ///
    /// Get all features associated with a specific application
    ///
    /// - Remark: HTTP `GET /v1/apps/{id}/features`.
    /// - Remark: Generated from `#/paths//v1/apps/{id}/features/get(getAppFeatures)`.
    public enum getAppFeatures {
        public static let id: Swift.String = "getAppFeatures"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/apps/{id}/features/GET/path`.
            public struct Path: Sendable, Hashable {
                /// Application ID
                ///
                /// - Remark: Generated from `#/paths/v1/apps/{id}/features/GET/path/id`.
                public var id: Components.Parameters.AppId
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: Application ID
                public init(id: Components.Parameters.AppId) {
                    self.id = id
                }
            }
            public var path: Operations.getAppFeatures.Input.Path
            /// - Remark: Generated from `#/paths/v1/apps/{id}/features/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Filter by platforms
                ///
                /// - Remark: Generated from `#/paths/v1/apps/{id}/features/GET/query/platforms`.
                public var platforms: Components.Parameters.Platforms?
                /// - Remark: Generated from `#/paths/v1/apps/{id}/features/GET/query/context`.
                @frozen public enum contextPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case paywall = "paywall"
                    case onboarding = "onboarding"
                }
                /// Filter features by context
                ///
                /// - Remark: Generated from `#/paths/v1/apps/{id}/features/GET/query/context`.
                public var context: Operations.getAppFeatures.Input.Query.contextPayload?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - platforms: Filter by platforms
                ///   - context: Filter features by context
                public init(
                    platforms: Components.Parameters.Platforms? = nil,
                    context: Operations.getAppFeatures.Input.Query.contextPayload? = nil
                ) {
                    self.platforms = platforms
                    self.context = context
                }
            }
            public var query: Operations.getAppFeatures.Input.Query
            /// - Remark: Generated from `#/paths/v1/apps/{id}/features/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAppFeatures.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAppFeatures.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getAppFeatures.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getAppFeatures.Input.Path,
                query: Operations.getAppFeatures.Input.Query = .init(),
                headers: Operations.getAppFeatures.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// List of features
            ///
            /// - Remark: Generated from `#/paths//v1/apps/{id}/features/get(getAppFeatures)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.FeaturesResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.FeaturesResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//v1/apps/{id}/features/get(getAppFeatures)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestResponse)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestResponse {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Not found
            ///
            /// - Remark: Generated from `#/paths//v1/apps/{id}/features/get(getAppFeatures)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFoundResponse)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFoundResponse {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//v1/apps/{id}/features/get(getAppFeatures)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponse)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponse {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieve application features sections
    ///
    /// Get all features associated with a specific application
    ///
    /// - Remark: HTTP `GET /v1/apps/{id}/features/sections`.
    /// - Remark: Generated from `#/paths//v1/apps/{id}/features/sections/get(getAppFeaturesSections)`.
    public enum getAppFeaturesSections {
        public static let id: Swift.String = "getAppFeaturesSections"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/apps/{id}/features/sections/GET/path`.
            public struct Path: Sendable, Hashable {
                /// Application ID
                ///
                /// - Remark: Generated from `#/paths/v1/apps/{id}/features/sections/GET/path/id`.
                public var id: Components.Parameters.AppId
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: Application ID
                public init(id: Components.Parameters.AppId) {
                    self.id = id
                }
            }
            public var path: Operations.getAppFeaturesSections.Input.Path
            /// - Remark: Generated from `#/paths/v1/apps/{id}/features/sections/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Filter by platforms
                ///
                /// - Remark: Generated from `#/paths/v1/apps/{id}/features/sections/GET/query/platforms`.
                public var platforms: Components.Parameters.Platforms?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - platforms: Filter by platforms
                public init(platforms: Components.Parameters.Platforms? = nil) {
                    self.platforms = platforms
                }
            }
            public var query: Operations.getAppFeaturesSections.Input.Query
            /// - Remark: Generated from `#/paths/v1/apps/{id}/features/sections/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAppFeaturesSections.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAppFeaturesSections.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getAppFeaturesSections.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getAppFeaturesSections.Input.Path,
                query: Operations.getAppFeaturesSections.Input.Query = .init(),
                headers: Operations.getAppFeaturesSections.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// List of features sections
            ///
            /// - Remark: Generated from `#/paths//v1/apps/{id}/features/sections/get(getAppFeaturesSections)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.SectionsResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.SectionsResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//v1/apps/{id}/features/sections/get(getAppFeaturesSections)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestResponse)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestResponse {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Not found
            ///
            /// - Remark: Generated from `#/paths//v1/apps/{id}/features/sections/get(getAppFeaturesSections)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFoundResponse)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFoundResponse {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//v1/apps/{id}/features/sections/get(getAppFeaturesSections)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponse)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponse {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get all ads features associated with a specific application
    ///
    /// Retrieve application ads
    ///
    /// - Remark: HTTP `GET /v1/apps/{id}/ads`.
    /// - Remark: Generated from `#/paths//v1/apps/{id}/ads/get(getAppAds)`.
    public enum getAppAds {
        public static let id: Swift.String = "getAppAds"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/apps/{id}/ads/GET/path`.
            public struct Path: Sendable, Hashable {
                /// Application ID
                ///
                /// - Remark: Generated from `#/paths/v1/apps/{id}/ads/GET/path/id`.
                public var id: Components.Parameters.AppId
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: Application ID
                public init(id: Components.Parameters.AppId) {
                    self.id = id
                }
            }
            public var path: Operations.getAppAds.Input.Path
            /// - Remark: Generated from `#/paths/v1/apps/{id}/ads/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Filter by platforms
                ///
                /// - Remark: Generated from `#/paths/v1/apps/{id}/ads/GET/query/platforms`.
                public var platforms: Components.Parameters.Platforms?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - platforms: Filter by platforms
                public init(platforms: Components.Parameters.Platforms? = nil) {
                    self.platforms = platforms
                }
            }
            public var query: Operations.getAppAds.Input.Query
            /// - Remark: Generated from `#/paths/v1/apps/{id}/ads/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAppAds.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAppAds.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getAppAds.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getAppAds.Input.Path,
                query: Operations.getAppAds.Input.Query = .init(),
                headers: Operations.getAppAds.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// List of app ads
            ///
            /// - Remark: Generated from `#/paths//v1/apps/{id}/ads/get(getAppAds)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.AdsResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.AdsResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//v1/apps/{id}/ads/get(getAppAds)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestResponse)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestResponse {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Not found
            ///
            /// - Remark: Generated from `#/paths//v1/apps/{id}/ads/get(getAppAds)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFoundResponse)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFoundResponse {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//v1/apps/{id}/ads/get(getAppAds)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponse)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponse {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get ad associated with a specific application
    ///
    /// Retrieve application ad
    ///
    /// - Remark: HTTP `GET /v1/apps/{id}/ad`.
    /// - Remark: Generated from `#/paths//v1/apps/{id}/ad/get(getAppAd)`.
    public enum getAppAd {
        public static let id: Swift.String = "getAppAd"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/apps/{id}/ad/GET/path`.
            public struct Path: Sendable, Hashable {
                /// Application ID
                ///
                /// - Remark: Generated from `#/paths/v1/apps/{id}/ad/GET/path/id`.
                public var id: Components.Parameters.AppId
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: Application ID
                public init(id: Components.Parameters.AppId) {
                    self.id = id
                }
            }
            public var path: Operations.getAppAd.Input.Path
            /// - Remark: Generated from `#/paths/v1/apps/{id}/ad/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Filter by platforms
                ///
                /// - Remark: Generated from `#/paths/v1/apps/{id}/ad/GET/query/platforms`.
                public var platforms: Components.Parameters.Platforms?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - platforms: Filter by platforms
                public init(platforms: Components.Parameters.Platforms? = nil) {
                    self.platforms = platforms
                }
            }
            public var query: Operations.getAppAd.Input.Query
            /// - Remark: Generated from `#/paths/v1/apps/{id}/ad/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAppAd.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAppAd.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getAppAd.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getAppAd.Input.Path,
                query: Operations.getAppAd.Input.Query = .init(),
                headers: Operations.getAppAd.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Ad
            ///
            /// - Remark: Generated from `#/paths//v1/apps/{id}/ad/get(getAppAd)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.AdResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.AdResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//v1/apps/{id}/ad/get(getAppAd)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestResponse)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestResponse {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Not found
            ///
            /// - Remark: Generated from `#/paths//v1/apps/{id}/ad/get(getAppAd)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFoundResponse)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFoundResponse {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//v1/apps/{id}/ad/get(getAppAd)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponse)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponse {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get all In-AppPurchases associated with a specific application
    ///
    /// Retrieve application In-AppPurchases products
    ///
    /// - Remark: HTTP `GET /v1/apps/{id}/in-app-purchases`.
    /// - Remark: Generated from `#/paths//v1/apps/{id}/in-app-purchases/get(getInAppPurchases)`.
    public enum getInAppPurchases {
        public static let id: Swift.String = "getInAppPurchases"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/apps/{id}/in-app-purchases/GET/path`.
            public struct Path: Sendable, Hashable {
                /// Application ID
                ///
                /// - Remark: Generated from `#/paths/v1/apps/{id}/in-app-purchases/GET/path/id`.
                public var id: Components.Parameters.AppId
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: Application ID
                public init(id: Components.Parameters.AppId) {
                    self.id = id
                }
            }
            public var path: Operations.getInAppPurchases.Input.Path
            /// - Remark: Generated from `#/paths/v1/apps/{id}/in-app-purchases/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getInAppPurchases.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getInAppPurchases.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getInAppPurchases.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getInAppPurchases.Input.Path,
                headers: Operations.getInAppPurchases.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Response containing in-app purchase product IDs and banner information
            ///
            /// - Remark: Generated from `#/paths//v1/apps/{id}/in-app-purchases/get(getInAppPurchases)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.InAppPurchaseResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.InAppPurchaseResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//v1/apps/{id}/in-app-purchases/get(getInAppPurchases)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestResponse)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestResponse {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Not found
            ///
            /// - Remark: Generated from `#/paths//v1/apps/{id}/in-app-purchases/get(getInAppPurchases)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFoundResponse)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFoundResponse {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//v1/apps/{id}/in-app-purchases/get(getInAppPurchases)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponse)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponse {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get features
    ///
    /// Retrieve features
    ///
    /// - Remark: HTTP `GET /v1/features/{id}`.
    /// - Remark: Generated from `#/paths//v1/features/{id}/get(getFeature)`.
    public enum getFeature {
        public static let id: Swift.String = "getFeature"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/features/{id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// Feature ID
                ///
                /// - Remark: Generated from `#/paths/v1/features/{id}/GET/path/id`.
                public var id: Components.Parameters.FeatureId
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - id: Feature ID
                public init(id: Components.Parameters.FeatureId) {
                    self.id = id
                }
            }
            public var path: Operations.getFeature.Input.Path
            /// - Remark: Generated from `#/paths/v1/features/{id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getFeature.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getFeature.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getFeature.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getFeature.Input.Path,
                headers: Operations.getFeature.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Feature
            ///
            /// - Remark: Generated from `#/paths//v1/features/{id}/get(getFeature)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.FeatureResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.FeatureResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//v1/features/{id}/get(getFeature)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestResponse)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestResponse {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Not found
            ///
            /// - Remark: Generated from `#/paths//v1/features/{id}/get(getFeature)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFoundResponse)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFoundResponse {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//v1/features/{id}/get(getFeature)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponse)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponse {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Get all sale offers
    ///
    /// Retrieve StoreKit offers
    ///
    /// - Remark: HTTP `GET /v1/in-app-purchases/offers`.
    /// - Remark: Generated from `#/paths//v1/in-app-purchases/offers/get(getInAppPurchaseOffers)`.
    public enum getInAppPurchaseOffers {
        public static let id: Swift.String = "getInAppPurchaseOffers"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/in-app-purchases/offers/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getInAppPurchaseOffers.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getInAppPurchaseOffers.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getInAppPurchaseOffers.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.getInAppPurchaseOffers.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// List of offers
            ///
            /// - Remark: Generated from `#/paths//v1/in-app-purchases/offers/get(getInAppPurchaseOffers)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.InAppPurchaseOffersResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.InAppPurchaseOffersResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//v1/in-app-purchases/offers/get(getInAppPurchaseOffers)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestResponse)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestResponse {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Not found
            ///
            /// - Remark: Generated from `#/paths//v1/in-app-purchases/offers/get(getInAppPurchaseOffers)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFoundResponse)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Components.Responses.NotFoundResponse {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//v1/in-app-purchases/offers/get(getInAppPurchaseOffers)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponse)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponse {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Fetch info
    ///
    /// - Remark: HTTP `GET /v1/infos`.
    /// - Remark: Generated from `#/paths//v1/infos/get(getInfo)`.
    public enum getInfo {
        public static let id: Swift.String = "getInfo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/infos/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getInfo.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getInfo.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.getInfo.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            /// Info
            ///
            /// - Remark: Generated from `#/paths//v1/infos/get(getInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Components.Responses.InfoResponse)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Components.Responses.InfoResponse {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//v1/infos/get(getInfo)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestResponse)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestResponse {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Internal server error
            ///
            /// - Remark: Generated from `#/paths//v1/infos/get(getInfo)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerErrorResponse)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Components.Responses.InternalServerErrorResponse {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Health Check
    ///
    /// Endpoint to check the health of the service
    ///
    /// - Remark: HTTP `GET /v1/health-check`.
    /// - Remark: Generated from `#/paths//v1/health-check/get(getHealthCheck)`.
    public enum getHealthCheck {
        public static let id: Swift.String = "getHealthCheck"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v1/health-check/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getHealthCheck.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getHealthCheck.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getHealthCheck.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.getHealthCheck.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v1/health-check/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v1/health-check/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v1/health-check/GET/responses/200/content/json/status`.
                        @frozen public enum statusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case up = "up"
                            case down = "down"
                        }
                        /// - Remark: Generated from `#/paths/v1/health-check/GET/responses/200/content/json/status`.
                        public var status: Operations.getHealthCheck.Output.Ok.Body.jsonPayload.statusPayload
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - status:
                        public init(status: Operations.getHealthCheck.Output.Ok.Body.jsonPayload.statusPayload) {
                            self.status = status
                        }
                        public enum CodingKeys: String, CodingKey {
                            case status
                        }
                    }
                    /// - Remark: Generated from `#/paths/v1/health-check/GET/responses/200/content/application\/json`.
                    case json(Operations.getHealthCheck.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getHealthCheck.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getHealthCheck.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getHealthCheck.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Service is healthy
            ///
            /// - Remark: Generated from `#/paths//v1/health-check/get(getHealthCheck)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getHealthCheck.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getHealthCheck.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad request
            ///
            /// - Remark: Generated from `#/paths//v1/health-check/get(getHealthCheck)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequestResponse)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Components.Responses.BadRequestResponse {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
